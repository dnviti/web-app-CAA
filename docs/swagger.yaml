basePath: /api
definitions:
  github_com_daniele_web-app-caa_internal_models.AddItemRequest:
    properties:
      item:
        $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.GridItemResponse"
      parentCategory:
        type: string
    required:
      - item
      - parentCategory
    type: object
  github_com_daniele_web-app-caa_internal_models.AuthResponse:
    properties:
      message:
        type: string
      refresh_token:
        type: string
      status:
        type: string
      token:
        type: string
      user:
        $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.User"
    type: object
  github_com_daniele_web-app-caa_internal_models.CheckEditorPasswordRequest:
    properties:
      password:
        type: string
    required:
      - password
    type: object
  github_com_daniele_web-app-caa_internal_models.ConjugateRequest:
    properties:
      base_forms:
        items:
          type: string
        type: array
      sentence:
        type: string
      tense:
        type: string
      words:
        items:
          type: string
        type: array
    type: object
  github_com_daniele_web-app-caa_internal_models.ConjugateResponse:
    properties:
      conjugations: {}
    type: object
  github_com_daniele_web-app-caa_internal_models.CorrectRequest:
    properties:
      sentence:
        type: string
    type: object
  github_com_daniele_web-app-caa_internal_models.CorrectResponse:
    properties:
      correction:
        type: string
    type: object
  github_com_daniele_web-app-caa_internal_models.ErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  github_com_daniele_web-app-caa_internal_models.GridItemResponse:
    properties:
      action:
        type: string
      color:
        type: string
      icon:
        type: string
      id:
        type: string
      isHideable:
        type: boolean
      isVisible:
        type: boolean
      label:
        type: string
      speak:
        type: string
      symbol_type:
        type: string
      target:
        type: string
      text:
        type: string
      type:
        type: string
    type: object
  github_com_daniele_web-app-caa_internal_models.GridResponse:
    additionalProperties:
      items:
        $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.GridItemResponse"
      type: array
    type: object
  github_com_daniele_web-app-caa_internal_models.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
      - password
      - username
    type: object
  github_com_daniele_web-app-caa_internal_models.Permission:
    properties:
      action:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      name:
        type: string
      resource:
        type: string
      roles:
        description: Many-to-many relationship with roles
        items:
          $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.Role"
        type: array
      updated_at:
        type: string
    type: object
  github_com_daniele_web-app-caa_internal_models.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
      - refresh_token
    type: object
  github_com_daniele_web-app-caa_internal_models.RefreshTokenResponse:
    properties:
      refresh_token:
        type: string
      token:
        type: string
    type: object
  github_com_daniele_web-app-caa_internal_models.RegisterRequest:
    properties:
      editorPassword:
        type: string
      gridType:
        type: string
      password:
        type: string
      username:
        type: string
    required:
      - editorPassword
      - gridType
      - password
      - username
    type: object
  github_com_daniele_web-app-caa_internal_models.Role:
    properties:
      created_at:
        type: string
      description:
        type: string
      display_name:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      name:
        type: string
      permissions:
        description: Many-to-many relationship with permissions
        items:
          $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.Permission"
        type: array
      updated_at:
        type: string
      users:
        description: Many-to-many relationship with users
        items:
          $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.User"
        type: array
    type: object
  github_com_daniele_web-app-caa_internal_models.SetupRequest:
    properties:
      gridType:
        type: string
    required:
      - gridType
    type: object
  github_com_daniele_web-app-caa_internal_models.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  github_com_daniele_web-app-caa_internal_models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      roles:
        description: Many-to-many relationship with roles
        items:
          $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.Role"
        type: array
      status:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  internal_handlers.CreatePermissionRequest:
    properties:
      action:
        type: string
      description:
        type: string
      name:
        type: string
      resource:
        type: string
    required:
      - action
      - name
      - resource
    type: object
  internal_handlers.CreateRoleRequest:
    properties:
      description:
        type: string
      display_name:
        type: string
      name:
        type: string
    required:
      - display_name
      - name
    type: object
  github_com_daniele_web-app-caa_internal_models.BulkOperationRequest:
    properties:
      operation:
        description: "Operation type: delete, activate, deactivate, assign_role, remove_role"
        type: string
      role_name:
        description: Role name for role operations
        type: string
      user_ids:
        items:
          type: string
        type: array
    required:
      - operation
      - user_ids
    type: object
  github_com_daniele_web-app-caa_internal_models.BulkOperationResult:
    properties:
      failed_users:
        items:
          $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.FailedUser"
        type: array
      message:
        type: string
      processed_count:
        type: integer
      success_count:
        type: integer
    type: object
  github_com_daniele_web-app-caa_internal_models.CreateUserRequest:
    properties:
      email:
        type: string
      is_active:
        type: boolean
      name:
        type: string
      password:
        type: string
      roles:
        items:
          type: string
        type: array
      username:
        type: string
    required:
      - username
      - email
      - password
      - name
    type: object
  github_com_daniele_web-app-caa_internal_models.FailedUser:
    properties:
      error:
        type: string
      user_id:
        type: string
    type: object
  github_com_daniele_web-app-caa_internal_models.SystemHealthResponse:
    properties:
      database_status:
        type: string
      message:
        type: string
      status:
        type: string
      timestamp:
        type: string
    type: object
  github_com_daniele_web-app-caa_internal_models.UpdateUserRequest:
    properties:
      email:
        type: string
      is_active:
        type: boolean
      name:
        type: string
      roles:
        items:
          type: string
        type: array
    type: object
  github_com_daniele_web-app-caa_internal_models.UserAnalytics:
    properties:
      active_users:
        type: integer
      inactive_users:
        type: integer
      recent_registrations:
        type: integer
      roles_distribution:
        additionalProperties:
          type: integer
        type: object
      total_users:
        type: integer
    type: object
  github_com_daniele_web-app-caa_internal_models.UserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      last_login:
        type: string
      name:
        type: string
      roles:
        items:
          $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.Role"
        type: array
      updated_at:
        type: string
      username:
        type: string
    type: object
  github_com_daniele_web-app-caa_internal_models.UsersListResponse:
    properties:
      current_page:
        type: integer
      page_size:
        type: integer
      total_count:
        type: integer
      total_pages:
        type: integer
      users:
        items:
          $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.UserResponse"
        type: array
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:6542
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: |-
    This is a CAA (Communication and Alternative Augmentative) web application API.
    It provides endpoints for grid management, user authentication, and AI-powered language services.

    ## Auto-Discovery
    This API supports standard OpenAPI auto-discovery patterns:
    - OpenAPI 2.0/Swagger JSON: `/openapi.json`
    - OpenAPI 2.0/Swagger YAML: `/openapi.yaml`
    - Interactive Documentation: `/swagger/index.html`
    - API Information: `/api`
    - Well-known OpenAPI Discovery: `/.well-known/openapi_description`
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Web App CAA API
  version: "1.0"
paths:
  /arasaac/icon/{id}:
    get:
      description:
        Retrieve an ARASAAC icon by its ID, with file-based caching (public
        endpoint)
      parameters:
        - description: Icon ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - image/png
      responses:
        "200":
          description: Icon image
          schema:
            type: file
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get ARASAAC icon by ID
      tags:
        - ARASAAC
  /arasaac/search:
    get:
      consumes:
        - application/json
      description: Search for ARASAAC icons by keyword with optional parallel preloading
      parameters:
        - description: Search query
          in: query
          name: query
          required: true
          type: string
        - description: Whether to preload icon data in parallel
          in: query
          name: preload
          type: boolean
        - description: Limit number of icons for preloading (max 20)
          in: query
          name: limit
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
        - BearerAuth: []
      summary: Search ARASAAC icons
      tags:
        - ARASAAC
  /auth/login:
    post:
      consumes:
        - application/json
      description: Authenticate user with username and password
      parameters:
        - description: Login request
          in: body
          name: request
          required: true
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.LoginRequest"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.AuthResponse"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
      summary: Login user
      tags:
        - Auth
  /auth/logout:
    post:
      description: Revoke all refresh tokens for the authenticated user
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.SuccessResponse"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
      security:
        - BearerAuth: []
      summary: Logout user
      tags:
        - Auth
  /auth/rbac/permissions:
    get:
      consumes:
        - application/json
      description: Get all available permissions in the system
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.Permission"
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
        - BearerAuth: []
      summary: Get all permissions
      tags:
        - Auth
    post:
      consumes:
        - application/json
      description: Create a new permission
      parameters:
        - description: Permission data
          in: body
          name: permission
          required: true
          schema:
            $ref: "#/definitions/internal_handlers.CreatePermissionRequest"
      produces:
        - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.Permission"
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
        - BearerAuth: []
      summary: Create permission
      tags:
        - Auth
  /auth/rbac/roles:
    get:
      consumes:
        - application/json
      description: Get all available roles in the system
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.Role"
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
        - BearerAuth: []
      summary: Get all roles
      tags:
        - Auth
    post:
      consumes:
        - application/json
      description: Create a new role
      parameters:
        - description: Role data
          in: body
          name: role
          required: true
          schema:
            $ref: "#/definitions/internal_handlers.CreateRoleRequest"
      produces:
        - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.Role"
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
        - BearerAuth: []
      summary: Create role
      tags:
        - Auth
  /auth/rbac/roles/{role_name}/permissions/{permission_name}:
    delete:
      consumes:
        - application/json
      description: Remove a permission from a role
      parameters:
        - description: Role Name
          in: path
          name: role_name
          required: true
          type: string
        - description: Permission Name
          in: path
          name: permission_name
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
        - BearerAuth: []
      summary: Remove permission from role
      tags:
        - Auth
    post:
      consumes:
        - application/json
      description: Assign a permission to a role
      parameters:
        - description: Role Name
          in: path
          name: role_name
          required: true
          type: string
        - description: Permission Name
          in: path
          name: permission_name
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
        - BearerAuth: []
      summary: Assign permission to role
      tags:
        - Auth
  /auth/rbac/users/{user_id}/check-permission:
    get:
      consumes:
        - application/json
      description: Check if a user has permission to perform an action on a resource
      parameters:
        - description: User ID
          in: path
          name: user_id
          required: true
          type: string
        - description: Resource
          in: query
          name: resource
          required: true
          type: string
        - description: Action
          in: query
          name: action
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: boolean
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
        - BearerAuth: []
      summary: Check user permission
      tags:
        - Auth
  /auth/rbac/users/{user_id}/permissions:
    get:
      consumes:
        - application/json
      description: Get all permissions assigned to a user through their roles
      parameters:
        - description: User ID
          in: path
          name: user_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.Permission"
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
        - BearerAuth: []
      summary: Get user permissions
      tags:
        - Auth
  /auth/rbac/users/{user_id}/roles:
    get:
      consumes:
        - application/json
      description: Get all roles assigned to a user
      parameters:
        - description: User ID
          in: path
          name: user_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.Role"
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
        - BearerAuth: []
      summary: Get user roles
      tags:
        - Auth
  /auth/rbac/users/{user_id}/roles/{role_name}:
    delete:
      consumes:
        - application/json
      description: Remove a role from a user
      parameters:
        - description: User ID
          in: path
          name: user_id
          required: true
          type: string
        - description: Role Name
          in: path
          name: role_name
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
        - BearerAuth: []
      summary: Remove role from user
      tags:
        - Auth
    post:
      consumes:
        - application/json
      description: Assign a role to a user
      parameters:
        - description: User ID
          in: path
          name: user_id
          required: true
          type: string
        - description: Role Name
          in: path
          name: role_name
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
        - BearerAuth: []
      summary: Assign role to user
      tags:
        - Auth
  /auth/refresh:
    post:
      consumes:
        - application/json
      description: Generate new access and refresh tokens using a refresh token
      parameters:
        - description: Refresh token request
          in: body
          name: request
          required: true
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.RefreshTokenRequest"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.RefreshTokenResponse"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
      summary: Refresh access token
      tags:
        - Auth
  /auth/register:
    post:
      consumes:
        - application/json
      description:
        Register a new user with username, password, editor password, and
        grid type
      parameters:
        - description: Registration request
          in: body
          name: request
          required: true
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.RegisterRequest"
      produces:
        - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.AuthResponse"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "409":
          description: Conflict
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
      summary: Register a new user
      tags:
        - Auth
  /auth/revoke:
    post:
      consumes:
        - application/json
      description: Revoke a refresh token to prevent further use
      parameters:
        - description: Refresh token request
          in: body
          name: request
          required: true
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.RefreshTokenRequest"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.SuccessResponse"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
      summary: Revoke refresh token
      tags:
        - Auth
  /auth/verify:
    get:
      description: Get the current authenticated user information
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.User"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "404":
          description: Not Found
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
      security:
        - BearerAuth: []
      summary: Get current user
      tags:
        - Auth
  /check-editor-password:
    post:
      consumes:
        - application/json
      description: Validate the editor password for the current user
      parameters:
        - description: Editor password check request
          in: body
          name: request
          required: true
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.CheckEditorPasswordRequest"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.SuccessResponse"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "403":
          description: Forbidden
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
      security:
        - BearerAuth: []
      summary: Check editor password
      tags:
        - Auth
  /complete-setup:
    post:
      description: Mark the user setup as complete
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.SuccessResponse"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
      security:
        - BearerAuth: []
      summary: Complete setup
      tags:
        - Grid
  /conjugate:
    post:
      consumes:
        - application/json
      description: Conjugate verbs in Italian based on tense and context
      parameters:
        - description: Conjugation request
          in: body
          name: request
          required: true
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ConjugateRequest"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ConjugateResponse"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
      security:
        - BearerAuth: []
      summary: Conjugate verbs
      tags:
        - AI
  /correct:
    post:
      consumes:
        - application/json
      description: Correct Italian sentences using AI language processing
      parameters:
        - description: Correction request
          in: body
          name: request
          required: true
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.CorrectRequest"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.CorrectResponse"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
      security:
        - BearerAuth: []
      summary: Correct sentences
      tags:
        - AI
  /grid:
    get:
      description: Retrieve the complete grid configuration for the current user
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.GridResponse"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
      security:
        - BearerAuth: []
      summary: Get grid
      tags:
        - Grid
    post:
      consumes:
        - application/json
      description: Save the complete grid configuration
      parameters:
        - description: Grid data to save
          in: body
          name: grid
          required: true
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.GridResponse"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.SuccessResponse"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
      security:
        - BearerAuth: []
      summary: Save grid
      tags:
        - Grid
  /grid/item:
    post:
      consumes:
        - application/json
      description: Add a new item to a specific category in the grid
      parameters:
        - description: Add item request
          in: body
          name: request
          required: true
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.AddItemRequest"
      produces:
        - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.GridItemResponse"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
      security:
        - BearerAuth: []
      summary: Add grid item
      tags:
        - Grid
  /grid/item/{id}:
    delete:
      description: Delete an existing item from the grid
      parameters:
        - description: Item ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.SuccessResponse"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "404":
          description: Not Found
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
      security:
        - BearerAuth: []
      summary: Delete grid item
      tags:
        - Grid
    put:
      consumes:
        - application/json
      description: Update an existing item in the grid
      parameters:
        - description: Item ID
          in: path
          name: id
          required: true
          type: string
        - description: Updated item data
          in: body
          name: item
          required: true
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.GridItemResponse"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.SuccessResponse"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "404":
          description: Not Found
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
      security:
        - BearerAuth: []
      summary: Update grid item
      tags:
        - Grid
  /rag-knowledge:
    get:
      consumes:
        - application/json
      description:
        Retrieve the current RAG knowledge data used by the AI system for
        language processing
      produces:
        - application/json
      responses:
        "200":
          description: RAG knowledge data
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
        - BearerAuth: []
      summary: Get RAG knowledge
      tags:
        - rag-knowledge
    put:
      consumes:
        - application/json
      description:
        Update the RAG knowledge data and optionally save to S3 storage.
        Requires admin privileges.
      parameters:
        - description: RAG knowledge data structure
          in: body
          name: knowledge
          required: true
          schema:
            additionalProperties: true
            type: object
        - description: Whether to save the updated knowledge to S3 storage
          in: query
          name: save_to_s3
          type: boolean
      produces:
        - application/json
      responses:
        "200":
          description: Success message with S3 save status
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request - invalid JSON format
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
        - BearerAuth: []
      summary: Update RAG knowledge
      tags:
        - rag-knowledge
  /rag-knowledge/backup:
    post:
      consumes:
        - application/json
      description:
        Create a timestamped backup of the current RAG knowledge in S3
        storage. Requires S3 to be enabled and admin privileges.
      produces:
        - application/json
      responses:
        "200":
          description: Success message
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error - S3 not enabled or backup failed
          schema:
            additionalProperties: true
            type: object
      security:
        - BearerAuth: []
      summary: Create RAG knowledge backup
      tags:
        - rag-knowledge
  /rag-knowledge/backups:
    get:
      consumes:
        - application/json
      description:
        List all available RAG knowledge backups in S3 storage with timestamps
        and metadata. Requires S3 to be enabled and admin privileges.
      produces:
        - application/json
      responses:
        "200":
          description: Object containing backups array
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error - S3 not enabled or list failed
          schema:
            additionalProperties: true
            type: object
      security:
        - BearerAuth: []
      summary: List RAG knowledge backups
      tags:
        - rag-knowledge
  /rag-knowledge/health:
    get:
      consumes:
        - application/json
      description:
        Check the health and connectivity of S3 storage service. Verifies
        bucket access and connectivity. Requires admin privileges.
      produces:
        - application/json
      responses:
        "200":
          description: S3 health status with connection details
          schema:
            additionalProperties: true
            type: object
        "500":
          description: S3 health check failed or S3 not enabled
          schema:
            additionalProperties: true
            type: object
      security:
        - BearerAuth: []
      summary: Check S3 health
      tags:
        - rag-knowledge
  /rag-knowledge/reload:
    post:
      consumes:
        - application/json
      description:
        Reload RAG knowledge from S3 storage or fall back to local file
        if S3 is unavailable. Requires admin privileges.
      produces:
        - application/json
      responses:
        "200":
          description: Success message
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
        - BearerAuth: []
      summary: Reload RAG knowledge
      tags:
        - rag-knowledge
  /rag-knowledge/restore/{backup_key}:
    post:
      consumes:
        - application/json
      description:
        Restore RAG knowledge from a specific timestamped backup stored
        in S3. This will replace the current knowledge. Requires S3 to be enabled
        and admin privileges.
      parameters:
        - description: S3 backup key (e.g., 'caa/backups/rag_knowledge_20240829_143052.json')
          in: path
          name: backup_key
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Success message with backup key
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request - backup key required
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error - restore failed
          schema:
            additionalProperties: true
            type: object
      security:
        - BearerAuth: []
      summary: Restore RAG knowledge from backup
      tags:
        - rag-knowledge
  /setup:
    post:
      consumes:
        - application/json
      description:
        Initialize a grid with the specified type (simplified, empty, or
        default)
      parameters:
        - description: Setup request
          in: body
          name: request
          required: true
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.SetupRequest"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.SuccessResponse"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
      security:
        - BearerAuth: []
      summary: Setup grid
      tags:
        - Grid
  /admin/analytics/grids:
    get:
      description: Get analytics data for grids including total count, active users, and recent activity
      produces:
        - application/json
      responses:
        "200":
          description: Grid analytics data
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "403":
          description: Forbidden
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
      security:
        - BearerAuth: []
      summary: Get grid analytics
      tags:
        - Admin
  /admin/analytics/users:
    get:
      description: Get user analytics including total users, active/inactive counts, recent registrations, and role distribution
      produces:
        - application/json
      responses:
        "200":
          description: User analytics data
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.UserAnalytics"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "403":
          description: Forbidden
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
      security:
        - BearerAuth: []
      summary: Get user analytics
      tags:
        - Admin
  /admin/system/ping:
    get:
      description: Check system health and database connectivity
      produces:
        - application/json
      responses:
        "200":
          description: System is healthy
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.SystemHealthResponse"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "403":
          description: Forbidden
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
      security:
        - BearerAuth: []
      summary: System health check
      tags:
        - Admin
  /admin/users:
    get:
      description: Get all users with pagination, filtering, and sorting options. Requires admin role.
      parameters:
        - description: Page number (default 1)
          in: query
          name: page
          type: integer
        - description: Number of items per page (default 10, max 100)
          in: query
          name: limit
          type: integer
        - description: Filter by active status
          in: query
          name: is_active
          type: boolean
        - description: Filter by role name
          in: query
          name: role
          type: string
        - description: Search in username, email, or name
          in: query
          name: search
          type: string
        - description: Sort field (username, email, name, created_at)
          in: query
          name: sort_by
          type: string
        - description: Sort order (asc, desc)
          in: query
          name: sort_order
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: List of users
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.UsersListResponse"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "403":
          description: Forbidden
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
      security:
        - BearerAuth: []
      summary: Get all users
      tags:
        - User Management
    post:
      consumes:
        - application/json
      description: Create a new user with specified roles. Requires admin role.
      parameters:
        - description: User creation request
          in: body
          name: request
          required: true
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.CreateUserRequest"
      produces:
        - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.UserResponse"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "403":
          description: Forbidden
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "409":
          description: Conflict - User already exists
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
      security:
        - BearerAuth: []
      summary: Create new user
      tags:
        - User Management
  /admin/users/bulk:
    post:
      consumes:
        - application/json
      description: Perform bulk operations on multiple users (delete, activate, deactivate, assign/remove roles). Requires admin role.
      parameters:
        - description: Bulk operation request
          in: body
          name: request
          required: true
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.BulkOperationRequest"
      produces:
        - application/json
      responses:
        "200":
          description: Bulk operation completed
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.BulkOperationResult"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "403":
          description: Forbidden
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
      security:
        - BearerAuth: []
      summary: Bulk user operations
      tags:
        - User Management
  /admin/users/{id}:
    delete:
      description: Delete a user by ID. Requires admin role.
      parameters:
        - description: User ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.SuccessResponse"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "403":
          description: Forbidden
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "404":
          description: User not found
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
      security:
        - BearerAuth: []
      summary: Delete user
      tags:
        - User Management
    get:
      description: Get a specific user by ID. Requires admin role.
      parameters:
        - description: User ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: User details
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.UserResponse"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "403":
          description: Forbidden
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "404":
          description: User not found
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
      security:
        - BearerAuth: []
      summary: Get user by ID
      tags:
        - User Management
    put:
      consumes:
        - application/json
      description: Update a user's information and roles. Requires admin role.
      parameters:
        - description: User ID
          in: path
          name: id
          required: true
          type: string
        - description: User update request
          in: body
          name: request
          required: true
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.UpdateUserRequest"
      produces:
        - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.UserResponse"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "403":
          description: Forbidden
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "404":
          description: User not found
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "409":
          description: Conflict - Email already exists
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
      security:
        - BearerAuth: []
      summary: Update user
      tags:
        - User Management
  /user/profile:
    get:
      description: Get the current authenticated user's profile information
      produces:
        - application/json
      responses:
        "200":
          description: User profile
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.UserResponse"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/github_com_daniele_web-app-caa_internal_models.ErrorResponse"
      security:
        - BearerAuth: []
      summary: Get user profile
      tags:
        - User Profile
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
