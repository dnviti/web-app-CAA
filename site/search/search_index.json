{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Web App CAA Documentation","text":"<p>Welcome to the Web App CAA (Comunicazione Aumentativa e Alternativa) documentation. This project is a Go implementation of an Augmentative and Alternative Communication (AAC) web application that helps users create custom communication grids with AI-powered language assistance.</p>"},{"location":"#quick-navigation","title":"\ufffd Quick Navigation","text":""},{"location":"#for-new-users","title":"For New Users","text":"<ul> <li>Installation Guide - Get Web App CAA running on your system</li> <li>Quick Start Guide - Your first steps with the application</li> <li>User Guide - Complete walkthrough of all features</li> <li>Configuration - Customizing your setup</li> </ul>"},{"location":"#for-developers","title":"For Developers","text":"<ul> <li>Development Setup - Set up your development environment</li> <li>Architecture Overview - Understand the system design</li> <li>API Reference - Complete API documentation</li> <li>Testing Guide - Testing practices and tools</li> <li>Contributing Guide - How to contribute to the project</li> </ul>"},{"location":"#for-devopsdeployment","title":"For DevOps/Deployment","text":"<ul> <li>Docker Deployment - Deploy using Docker containers</li> <li>Production Deployment - Production deployment guide</li> <li>Environment Variables - Configuration reference</li> </ul>"},{"location":"#what-is-web-app-caa","title":"\ufffd\ud83d\ude80 What is Web App CAA?","text":"<p>Web App CAA is a modern web application built in Go that provides:</p> <ul> <li>Interactive Communication Grids: Create and customize visual communication boards with categories, items, and actions</li> <li>AI-Powered Language Support: Italian verb conjugation and sentence correction using LLM services</li> <li>User Authentication: Secure user accounts with JWT-based authentication</li> <li>Flexible Templates: Choose from default, simplified, or empty grid templates</li> <li>Multi-Database Support: Works with SQLite for development and MySQL for production</li> </ul>"},{"location":"#key-features","title":"\ud83c\udfd7\ufe0f Key Features","text":""},{"location":"#authentication-system","title":"\u2705 Authentication System","text":"<ul> <li>Secure user registration with bcrypt password hashing</li> <li>JWT-based session management</li> <li>Editor password verification for administrative functions</li> <li>User status tracking (pending_setup/active)</li> </ul>"},{"location":"#grid-management","title":"\u2705 Grid Management","text":"<ul> <li>Three pre-built templates: Default, Simplified, and Empty</li> <li>Full CRUD operations for grid items</li> <li>Hierarchical category organization</li> <li>Item ordering and visibility controls</li> <li>Customizable colors, icons, and actions</li> </ul>"},{"location":"#ai-services","title":"\u2705 AI Services","text":"<ul> <li>Verb Conjugation: Italian verbs conjugated to present, past, and future tenses</li> <li>Sentence Correction: Grammar checking and correction</li> <li>Template-based Processing: Uses Go templates with RAG knowledge</li> <li>Multiple LLM Backends: Supports Ollama and OpenAI-compatible APIs</li> </ul>"},{"location":"#modern-architecture","title":"\u2705 Modern Architecture","text":"<ul> <li>Clean architecture with proper separation of concerns</li> <li>RESTful API design</li> <li>Middleware for logging and authentication</li> <li>Static file serving for web assets</li> <li>Docker support for easy deployment</li> </ul>"},{"location":"#common-tasks","title":"\ud83c\udfaf Common Tasks","text":"I want to... Go to... Install and try the app Quick Start Guide Set up AI backends Configuration \u2192 AI Services Deploy to production Production Deployment Contribute code Contributing Guide Understand the API API Reference Customize grid templates User Guide \u2192 Grid Management Set up development environment Development Setup Run tests Testing Guide Deploy with Docker Docker Deployment Understand the architecture Architecture Overview"},{"location":"#technology-stack","title":"\ud83d\udee0\ufe0f Technology Stack","text":"Component Technology Backend Go 1.21+ with Gin web framework Database SQLite (dev) / MySQL (production) ORM GORM with auto-migration Authentication JWT tokens with bcrypt AI Integration Ollama / OpenAI APIs Frontend HTML5, CSS3, Vanilla JavaScript Containerization Docker &amp; Docker Compose Documentation MkDocs with Material theme"},{"location":"#getting-started","title":"\ud83c\udfaf Getting Started","text":"<ol> <li>Install Prerequisites</li> <li>Clone and Build</li> <li>Configure Environment</li> <li>Deploy with Docker</li> </ol>"},{"location":"#navigation","title":"\ud83d\udcd6 Navigation","text":"<p>Use the sidebar to navigate through different sections:</p> <ul> <li>Getting Started: Installation and initial setup</li> <li>Architecture: System design and structure</li> <li>API Reference: Complete endpoint documentation</li> <li>Deployment: Production deployment guides</li> <li>Development: Contributing and testing guidelines</li> </ul>"},{"location":"#contributing","title":"\ud83e\udd1d Contributing","text":"<p>This project welcomes contributions! Please see our Contributing Guide for details on how to get involved.</p> <p>Need Help? Check out our FAQ or open an issue on GitHub.</p>"},{"location":"api/ai/","title":"AI Services API","text":"<p>The AI Services API provides language processing capabilities for Web App CAA, including verb conjugation and sentence correction powered by Large Language Models (LLMs).</p>"},{"location":"api/ai/#base-url","title":"Base URL","text":"<pre><code>http://localhost:3000/api\n</code></pre>"},{"location":"api/ai/#ai-service-overview","title":"AI Service Overview","text":"<p>Web App CAA integrates with multiple AI backends to provide Italian language processing:</p> <ul> <li>Verb Conjugation: Convert infinitive verbs to appropriate tenses based on sentence context</li> <li>Sentence Correction: Grammar checking and correction for Italian sentences</li> <li>Template-based Processing: Uses RAG (Retrieval-Augmented Generation) with curated knowledge</li> </ul>"},{"location":"api/ai/#supported-backends","title":"Supported Backends","text":"Backend Description Use Case Ollama Local LLM inference Privacy-focused, offline usage OpenAI Cloud-based AI service High-quality results, requires API key"},{"location":"api/ai/#endpoints","title":"Endpoints","text":""},{"location":"api/ai/#post-apiconjugate","title":"POST /api/conjugate","text":"<p>Conjugate Italian verbs based on sentence context and target tense.</p> <p>Protected Endpoint</p> <p>Requires valid JWT token in Authorization header.</p>"},{"location":"api/ai/#request","title":"Request","text":"<pre><code>POST /api/conjugate\nAuthorization: Bearer &lt;jwt-token&gt;\nContent-Type: application/json\n\n{\n  \"sentence\": \"Io mangiare la pizza\",\n  \"baseForms\": [\"mangiare\"],\n  \"tense\": \"presente\"\n}\n</code></pre>"},{"location":"api/ai/#request-body","title":"Request Body","text":"Field Type Required Description <code>sentence</code> string Yes Sentence containing the verbs to conjugate <code>baseForms</code> array Yes List of infinitive verbs to conjugate <code>tense</code> string Yes Target tense: <code>presente</code>, <code>passato</code>, <code>futuro</code>"},{"location":"api/ai/#response","title":"Response","text":"Success (200 OK)Multiple VerbsError (500 Internal Server Error) <pre><code>{\n  \"mangiare\": \"mangio\"\n}\n</code></pre> <pre><code>{\n  \"mangiare\": \"mangio\",\n  \"bere\": \"bevo\",\n  \"dormire\": \"dormo\"\n}\n</code></pre> <pre><code>{\n  \"error\": \"AI service unavailable\"\n}\n</code></pre>"},{"location":"api/ai/#supported-tenses","title":"Supported Tenses","text":"Tense Description Example <code>presente</code> Present indicative io mangio, tu mangi <code>passato</code> Past perfect (passato prossimo) io ho mangiato, tu hai mangiato <code>futuro</code> Simple future io manger\u00f2, tu mangerai"},{"location":"api/ai/#example-usage","title":"Example Usage","text":"<pre><code>const conjugateVerbs = async (sentence, verbs, tense) =&gt; {\n  const response = await fetch('/api/conjugate', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${localStorage.getItem('authToken')}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      sentence,\n      baseForms: verbs,\n      tense\n    })\n  });\n\n  const conjugations = await response.json();\n\n  if (response.ok) {\n    console.log('Conjugations:', conjugations);\n    return conjugations;\n  } else {\n    console.error('Conjugation failed:', conjugations.error);\n    throw new Error(conjugations.error);\n  }\n};\n\n// Usage example\nconjugateVerbs(\"Io mangiare e bere\", [\"mangiare\", \"bere\"], \"presente\")\n  .then(result =&gt; {\n    // Result: {\"mangiare\": \"mangio\", \"bere\": \"bevo\"}\n    console.log(result);\n  });\n</code></pre>"},{"location":"api/ai/#post-apicorrect","title":"POST /api/correct","text":"<p>Correct grammatical errors in Italian sentences.</p> <p>Protected Endpoint</p> <p>Requires valid JWT token in Authorization header.</p>"},{"location":"api/ai/#request_1","title":"Request","text":"<pre><code>POST /api/correct\nAuthorization: Bearer &lt;jwt-token&gt;\nContent-Type: application/json\n\n{\n  \"sentence\": \"Io mangio la pizza buona\"\n}\n</code></pre>"},{"location":"api/ai/#request-body_1","title":"Request Body","text":"Field Type Required Description <code>sentence</code> string Yes Italian sentence to correct"},{"location":"api/ai/#response_1","title":"Response","text":"Success (200 OK)No Changes NeededError (500 Internal Server Error) <pre><code>{\n  \"corrected_sentence\": \"Io mangio la buona pizza\"\n}\n</code></pre> <pre><code>{\n  \"corrected_sentence\": \"Io mangio la pizza buona\"\n}\n</code></pre> <pre><code>{\n  \"error\": \"AI service unavailable\"\n}\n</code></pre>"},{"location":"api/ai/#example-usage_1","title":"Example Usage","text":"<pre><code>const correctSentence = async (sentence) =&gt; {\n  const response = await fetch('/api/correct', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${localStorage.getItem('authToken')}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ sentence })\n  });\n\n  const result = await response.json();\n\n  if (response.ok) {\n    return result.corrected_sentence;\n  } else {\n    console.error('Correction failed:', result.error);\n    throw new Error(result.error);\n  }\n};\n\n// Usage example\ncorrectSentence(\"Io sono andato a casa ieri\")\n  .then(corrected =&gt; {\n    console.log('Corrected:', corrected);\n  });\n</code></pre>"},{"location":"api/ai/#ai-processing-flow","title":"AI Processing Flow","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant API\n    participant LLMService\n    participant Template\n    participant AI_Backend\n\n    Client-&gt;&gt;API: POST /api/conjugate\n    API-&gt;&gt;LLMService: Process request\n    LLMService-&gt;&gt;Template: Render prompt template\n    Template--&gt;&gt;LLMService: Generated prompt\n    LLMService-&gt;&gt;AI_Backend: Send prompt\n    AI_Backend--&gt;&gt;LLMService: AI response\n    LLMService-&gt;&gt;LLMService: Parse &amp; validate\n    LLMService--&gt;&gt;API: Processed result\n    API--&gt;&gt;Client: JSON response</code></pre>"},{"location":"api/ai/#template-system","title":"Template System","text":"<p>The AI service uses Go templates with RAG knowledge for consistent, high-quality results.</p>"},{"location":"api/ai/#template-structure","title":"Template Structure","text":""},{"location":"api/ai/#present-tense-template-presentetmpl","title":"Present Tense Template (<code>presente.tmpl</code>)","text":"<pre><code>Sei un meticoloso esperto di grammatica italiana. Il tuo compito \u00e8 coniugare una lista di verbi al Presente Indicativo in base al pronome soggetto trovato nella frase.\n\n**CONOSCENZA DI RIFERIMENTO (RAG):**\n{{.RagKnowledge}}\n\n**FRASE:** {{.Sentence}}\n**VERBI:** {{.BaseFormsJSON}}\n\nRispondi SOLO con un oggetto JSON valido che mappa ogni verbo infinito alla sua forma coniugata.\n</code></pre>"},{"location":"api/ai/#rag-knowledge-integration","title":"RAG Knowledge Integration","text":"<pre><code>{\n  \"presente_indicativo\": {\n    \"general_rules\": {\n      \"are_verbs\": {\n        \"conjugation\": \"io -o, tu -i, lui/lei -a, noi -iamo, voi -ate, loro -ano\"\n      }\n    },\n    \"irregular_verbs\": {\n      \"essere\": {\n        \"conjugation\": \"io sono, tu sei, lui/lei \u00e8, noi siamo, voi siete, loro sono\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"api/ai/#configuration","title":"Configuration","text":""},{"location":"api/ai/#environment-variables","title":"Environment Variables","text":"<p>Configure AI services with these environment variables:</p> <pre><code># AI Backend Selection\nBACKEND_TYPE=ollama          # or \"openai\"\n\n# Ollama Configuration\nLLM_HOST=http://localhost:11434\nLLM_MODEL=llama2\n\n# OpenAI Configuration  \nOPENAI_API_KEY=sk-your-api-key\nLLM_MODEL=gpt-3.5-turbo\n</code></pre>"},{"location":"api/ai/#backend-comparison","title":"Backend Comparison","text":"Feature Ollama OpenAI Privacy Complete local processing Data sent to OpenAI Cost Free (local compute) Pay-per-token Quality Good (model dependent) Excellent Speed Fast (local) Very fast (API) Offline Yes No Setup Requires local installation API key only"},{"location":"api/ai/#error-handling","title":"Error Handling","text":""},{"location":"api/ai/#common-error-responses","title":"Common Error Responses","text":""},{"location":"api/ai/#ai-service-unavailable","title":"AI Service Unavailable","text":"<pre><code>{\n  \"error\": \"AI service unavailable\",\n  \"details\": \"Could not connect to LLM backend\"\n}\n</code></pre>"},{"location":"api/ai/#invalid-request","title":"Invalid Request","text":"<pre><code>{\n  \"error\": \"Invalid request payload\",\n  \"details\": \"Missing required field: sentence\"\n}\n</code></pre>"},{"location":"api/ai/#processing-timeout","title":"Processing Timeout","text":"<pre><code>{\n  \"error\": \"Request timeout\",\n  \"details\": \"AI processing took too long\"\n}\n</code></pre>"},{"location":"api/ai/#error-handling-best-practices","title":"Error Handling Best Practices","text":"<pre><code>const handleAIRequest = async (requestFn) =&gt; {\n  try {\n    return await requestFn();\n  } catch (error) {\n    if (error.message.includes('unavailable')) {\n      // Fallback to basic functionality\n      console.warn('AI service unavailable, using fallback');\n      return null;\n    } else if (error.message.includes('timeout')) {\n      // Retry with shorter timeout\n      console.log('Retrying request...');\n      return await requestFn();\n    } else {\n      // Show user-friendly error\n      throw new Error('Language processing temporarily unavailable');\n    }\n  }\n};\n</code></pre>"},{"location":"api/ai/#performance-considerations","title":"Performance Considerations","text":""},{"location":"api/ai/#caching","title":"Caching","text":"<p>The service implements several caching strategies:</p> <ul> <li>Template Caching: Compiled templates are cached in memory</li> <li>RAG Knowledge: Loaded once at startup</li> <li>Response Patterns: Common conjugations may be cached</li> </ul>"},{"location":"api/ai/#rate-limiting","title":"Rate Limiting","text":"<p>Consider implementing rate limiting for AI endpoints:</p> <pre><code>// Example rate limiting\nconst rateLimits = {\n  '/api/conjugate': '10 requests per minute',\n  '/api/correct': '5 requests per minute'\n};\n</code></pre>"},{"location":"api/ai/#optimization-tips","title":"Optimization Tips","text":"<ol> <li>Batch Requests: Send multiple verbs in one request</li> <li>Client-side Cache: Cache common conjugations</li> <li>Fallback Handling: Graceful degradation when AI unavailable</li> <li>Request Debouncing: Avoid excessive API calls</li> </ol>"},{"location":"api/ai/#integration-examples","title":"Integration Examples","text":""},{"location":"api/ai/#complete-ai-service-client","title":"Complete AI Service Client","text":"<pre><code>class AIService {\n  constructor() {\n    this.baseURL = '/api';\n    this.cache = new Map();\n  }\n\n  getHeaders() {\n    return {\n      'Authorization': `Bearer ${localStorage.getItem('authToken')}`,\n      'Content-Type': 'application/json'\n    };\n  }\n\n  async conjugate(sentence, verbs, tense) {\n    const cacheKey = `${sentence}-${verbs.join(',')}-${tense}`;\n\n    // Check cache first\n    if (this.cache.has(cacheKey)) {\n      return this.cache.get(cacheKey);\n    }\n\n    try {\n      const response = await fetch(`${this.baseURL}/conjugate`, {\n        method: 'POST',\n        headers: this.getHeaders(),\n        body: JSON.stringify({\n          sentence,\n          baseForms: verbs,\n          tense\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}`);\n      }\n\n      const result = await response.json();\n\n      // Cache successful results\n      this.cache.set(cacheKey, result);\n\n      return result;\n    } catch (error) {\n      console.error('Conjugation failed:', error);\n      throw error;\n    }\n  }\n\n  async correct(sentence) {\n    try {\n      const response = await fetch(`${this.baseURL}/correct`, {\n        method: 'POST',\n        headers: this.getHeaders(),\n        body: JSON.stringify({ sentence })\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}`);\n      }\n\n      const result = await response.json();\n      return result.corrected_sentence;\n    } catch (error) {\n      console.error('Correction failed:', error);\n      throw error;\n    }\n  }\n\n  clearCache() {\n    this.cache.clear();\n  }\n}\n\n// Usage\nconst aiService = new AIService();\n\n// Conjugate verbs\nconst conjugations = await aiService.conjugate(\n  \"Io mangiare la pizza\",\n  [\"mangiare\"],\n  \"presente\"\n);\n\n// Correct sentence\nconst corrected = await aiService.correct(\n  \"Io sono andato a casa ieri\"\n);\n</code></pre> <p>The AI Services API provides powerful language processing capabilities to enhance the communication experience in Web App CAA, making it easier for users to create grammatically correct Italian sentences with properly conjugated verbs.</p>"},{"location":"api/authentication/","title":"Authentication API","text":"<p>The Authentication API handles user registration, login, and authorization for Web App CAA. All endpoints use JSON for request and response bodies.</p>"},{"location":"api/authentication/#base-url","title":"Base URL","text":"<pre><code>http://localhost:3000/api\n</code></pre>"},{"location":"api/authentication/#authentication-flow","title":"Authentication Flow","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant API\n    participant Database\n\n    Note over Client,Database: Registration Flow\n    Client-&gt;&gt;API: POST /register\n    API-&gt;&gt;Database: Create user\n    Database--&gt;&gt;API: User created\n    API--&gt;&gt;Client: Success response\n\n    Note over Client,Database: Login Flow  \n    Client-&gt;&gt;API: POST /login\n    API-&gt;&gt;Database: Validate credentials\n    Database--&gt;&gt;API: User data\n    API--&gt;&gt;Client: JWT token + user info\n\n    Note over Client,Database: Protected Requests\n    Client-&gt;&gt;API: Request with JWT header\n    API-&gt;&gt;API: Validate token\n    API-&gt;&gt;Database: Get user data\n    Database--&gt;&gt;API: User data\n    API--&gt;&gt;Client: Protected resource</code></pre>"},{"location":"api/authentication/#endpoints","title":"Endpoints","text":""},{"location":"api/authentication/#post-apiregister","title":"POST /api/register","text":"<p>Register a new user account.</p>"},{"location":"api/authentication/#request","title":"Request","text":"<pre><code>POST /api/register\nContent-Type: application/json\n\n{\n  \"username\": \"john_doe\",\n  \"password\": \"secure_password_123\",\n  \"editorPassword\": \"admin_password_456\"\n}\n</code></pre>"},{"location":"api/authentication/#request-body","title":"Request Body","text":"Field Type Required Description <code>username</code> string Yes Unique username (3-50 characters) <code>password</code> string Yes User password (minimum 6 characters) <code>editorPassword</code> string Yes Administrative password for editor functions"},{"location":"api/authentication/#response","title":"Response","text":"Success (201 Created)Username Exists (409 Conflict)Validation Error (400 Bad Request)Server Error (500 Internal Server Error) <pre><code>{\n  \"message\": \"User registered successfully\",\n  \"user\": {\n    \"id\": 1,\n    \"username\": \"john_doe\",\n    \"status\": \"pending_setup\"\n  }\n}\n</code></pre> <pre><code>{\n  \"error\": \"Username already exists\"\n}\n</code></pre> <pre><code>{\n  \"error\": \"Username must be between 3 and 50 characters\"\n}\n</code></pre> <pre><code>{\n  \"error\": \"Internal server error\"\n}\n</code></pre>"},{"location":"api/authentication/#validation-rules","title":"Validation Rules","text":"<ul> <li>Username: 3-50 characters, alphanumeric and underscores only</li> <li>Password: Minimum 6 characters</li> <li>Editor Password: Required for administrative functions</li> </ul>"},{"location":"api/authentication/#example-usage","title":"Example Usage","text":"<pre><code>// Registration example\nconst registerUser = async (userData) =&gt; {\n  const response = await fetch('/api/register', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(userData)\n  });\n\n  const result = await response.json();\n\n  if (response.ok) {\n    console.log('Registration successful:', result.user);\n    // Redirect to login or setup\n  } else {\n    console.error('Registration failed:', result.error);\n  }\n};\n</code></pre>"},{"location":"api/authentication/#post-apilogin","title":"POST /api/login","text":"<p>Authenticate a user and receive a JWT token.</p>"},{"location":"api/authentication/#request_1","title":"Request","text":"<pre><code>POST /api/login\nContent-Type: application/json\n\n{\n  \"username\": \"john_doe\",\n  \"password\": \"secure_password_123\"\n}\n</code></pre>"},{"location":"api/authentication/#request-body_1","title":"Request Body","text":"Field Type Required Description <code>username</code> string Yes User's username <code>password</code> string Yes User's password"},{"location":"api/authentication/#response_1","title":"Response","text":"Success (200 OK)Invalid Credentials (401 Unauthorized)Validation Error (400 Bad Request) <pre><code>{\n  \"message\": \"Login successful\",\n  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"user\": {\n    \"id\": 1,\n    \"username\": \"john_doe\",\n    \"status\": \"active\"\n  }\n}\n</code></pre> <pre><code>{\n  \"error\": \"Invalid username or password\"\n}\n</code></pre> <pre><code>{\n  \"error\": \"Username and password are required\"\n}\n</code></pre>"},{"location":"api/authentication/#jwt-token","title":"JWT Token","text":"<p>The returned token is a JSON Web Token (JWT) that must be included in the <code>Authorization</code> header for protected endpoints:</p> <pre><code>Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n</code></pre>"},{"location":"api/authentication/#token-claims","title":"Token Claims","text":"<pre><code>{\n  \"userId\": 1,\n  \"username\": \"john_doe\",\n  \"exp\": 1735689600,\n  \"iat\": 1735603200\n}\n</code></pre>"},{"location":"api/authentication/#example-usage_1","title":"Example Usage","text":"<pre><code>// Login example\nconst loginUser = async (credentials) =&gt; {\n  const response = await fetch('/api/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(credentials)\n  });\n\n  const result = await response.json();\n\n  if (response.ok) {\n    // Store token for subsequent requests\n    localStorage.setItem('authToken', result.token);\n    localStorage.setItem('user', JSON.stringify(result.user));\n    console.log('Login successful');\n  } else {\n    console.error('Login failed:', result.error);\n  }\n};\n</code></pre>"},{"location":"api/authentication/#post-apicheck-editor-password","title":"POST /api/check-editor-password","text":"<p>Verify the editor password for administrative functions.</p> <p>Protected Endpoint</p> <p>This endpoint requires a valid JWT token in the Authorization header.</p>"},{"location":"api/authentication/#request_2","title":"Request","text":"<pre><code>POST /api/check-editor-password\nAuthorization: Bearer &lt;jwt-token&gt;\nContent-Type: application/json\n\n{\n  \"editorPassword\": \"admin_password_456\"\n}\n</code></pre>"},{"location":"api/authentication/#request-body_2","title":"Request Body","text":"Field Type Required Description <code>editorPassword</code> string Yes Editor/administrative password"},{"location":"api/authentication/#response_2","title":"Response","text":"Correct Password (200 OK)Incorrect Password (401 Unauthorized)Missing Token (401 Unauthorized) <pre><code>{\n  \"message\": \"Editor password is correct\",\n  \"valid\": true\n}\n</code></pre> <pre><code>{\n  \"error\": \"Invalid editor password\",\n  \"valid\": false\n}\n</code></pre> <pre><code>{\n  \"error\": \"Authorization token required\"\n}\n</code></pre>"},{"location":"api/authentication/#example-usage_2","title":"Example Usage","text":"<pre><code>// Check editor password\nconst verifyEditorPassword = async (password) =&gt; {\n  const token = localStorage.getItem('authToken');\n\n  const response = await fetch('/api/check-editor-password', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    },\n    body: JSON.stringify({ editorPassword: password })\n  });\n\n  const result = await response.json();\n  return result.valid;\n};\n</code></pre>"},{"location":"api/authentication/#authentication-middleware","title":"Authentication Middleware","text":"<p>Protected endpoints automatically validate JWT tokens through authentication middleware.</p>"},{"location":"api/authentication/#middleware-flow","title":"Middleware Flow","text":"<ol> <li>Extract Token: Get token from <code>Authorization: Bearer &lt;token&gt;</code> header</li> <li>Validate Token: Verify JWT signature and expiration</li> <li>Load User: Fetch user data from database</li> <li>Set Context: Add user information to request context</li> </ol>"},{"location":"api/authentication/#protected-endpoint-usage","title":"Protected Endpoint Usage","text":"<pre><code>// Making authenticated requests\nconst makeAuthenticatedRequest = async (url, options = {}) =&gt; {\n  const token = localStorage.getItem('authToken');\n\n  const response = await fetch(url, {\n    ...options,\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`,\n      ...options.headers\n    }\n  });\n\n  if (response.status === 401) {\n    // Token expired or invalid, redirect to login\n    localStorage.removeItem('authToken');\n    window.location.href = '/login';\n    return;\n  }\n\n  return response;\n};\n</code></pre>"},{"location":"api/authentication/#error-handling","title":"Error Handling","text":""},{"location":"api/authentication/#http-status-codes","title":"HTTP Status Codes","text":"Status Description When Used <code>200</code> OK Successful request <code>201</code> Created User registration successful <code>400</code> Bad Request Invalid request payload <code>401</code> Unauthorized Authentication failed <code>409</code> Conflict Username already exists <code>500</code> Internal Server Error Server error"},{"location":"api/authentication/#error-response-format","title":"Error Response Format","text":"<p>All error responses follow this format:</p> <pre><code>{\n  \"error\": \"Descriptive error message\",\n  \"details\": \"Optional additional details\"\n}\n</code></pre>"},{"location":"api/authentication/#common-errors","title":"Common Errors","text":""},{"location":"api/authentication/#invalid-jwt-token","title":"Invalid JWT Token","text":"<pre><code>{\n  \"error\": \"Invalid or expired token\"\n}\n</code></pre>"},{"location":"api/authentication/#missing-authorization-header","title":"Missing Authorization Header","text":"<pre><code>{\n  \"error\": \"Authorization token required\"\n}\n</code></pre>"},{"location":"api/authentication/#user-not-found","title":"User Not Found","text":"<pre><code>{\n  \"error\": \"User not found\"\n}\n</code></pre>"},{"location":"api/authentication/#security-considerations","title":"Security Considerations","text":""},{"location":"api/authentication/#password-security","title":"Password Security","text":"<ul> <li>Passwords are hashed using bcrypt with cost factor 12</li> <li>Original passwords are never stored or logged</li> <li>Password validation ensures minimum complexity</li> </ul>"},{"location":"api/authentication/#jwt-security","title":"JWT Security","text":"<ul> <li>Tokens are signed with HS256 algorithm</li> <li>Secret key should be cryptographically secure</li> <li>Tokens have reasonable expiration times</li> <li>Tokens are validated on every protected request</li> </ul>"},{"location":"api/authentication/#rate-limiting","title":"Rate Limiting","text":"<p>Consider implementing rate limiting for authentication endpoints:</p> <pre><code>// Example rate limiting configuration\nconst rateLimit = {\n  '/api/login': '5 requests per minute',\n  '/api/register': '3 requests per hour'\n};\n</code></pre>"},{"location":"api/authentication/#integration-examples","title":"Integration Examples","text":""},{"location":"api/authentication/#frontend-integration","title":"Frontend Integration","text":"<pre><code>// Complete authentication flow\nclass AuthService {\n  constructor() {\n    this.token = localStorage.getItem('authToken');\n    this.user = JSON.parse(localStorage.getItem('user') || 'null');\n  }\n\n  async register(userData) {\n    const response = await fetch('/api/register', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(userData)\n    });\n\n    const result = await response.json();\n\n    if (!response.ok) {\n      throw new Error(result.error);\n    }\n\n    return result;\n  }\n\n  async login(credentials) {\n    const response = await fetch('/api/login', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(credentials)\n    });\n\n    const result = await response.json();\n\n    if (!response.ok) {\n      throw new Error(result.error);\n    }\n\n    this.token = result.token;\n    this.user = result.user;\n\n    localStorage.setItem('authToken', this.token);\n    localStorage.setItem('user', JSON.stringify(this.user));\n\n    return result;\n  }\n\n  logout() {\n    this.token = null;\n    this.user = null;\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('user');\n  }\n\n  isAuthenticated() {\n    return !!this.token &amp;&amp; !!this.user;\n  }\n\n  getAuthHeaders() {\n    return {\n      'Authorization': `Bearer ${this.token}`,\n      'Content-Type': 'application/json'\n    };\n  }\n}\n</code></pre> <p>Next: Grid Management API \u2192</p>"},{"location":"api/grid/","title":"Grid Management API","text":"<p>The Grid Management API handles communication grid operations including setup, CRUD operations on grid items, and template management. All endpoints require authentication unless otherwise specified.</p>"},{"location":"api/grid/#base-url","title":"Base URL","text":"<pre><code>http://localhost:3000/api\n</code></pre>"},{"location":"api/grid/#grid-structure","title":"Grid Structure","text":"<p>Communication grids consist of hierarchical items organized by categories:</p> <pre><code>graph TD\n    A[Root Grid] --&gt; B[Category: Verbi]\n    A --&gt; C[Category: Sostantivi]\n    A --&gt; D[Category: System]\n\n    B --&gt; E[Item: Mangiare]\n    B --&gt; F[Item: Bere]\n    B --&gt; G[Item: Dormire]\n\n    C --&gt; H[Item: Casa]\n    C --&gt; I[Item: Auto]\n\n    D --&gt; J[Action: Presente]\n    D --&gt; K[Action: Passato]\n    D --&gt; L[Action: Cancella]</code></pre>"},{"location":"api/grid/#grid-templates","title":"Grid Templates","text":""},{"location":"api/grid/#available-templates","title":"Available Templates","text":"Template Description Items <code>default</code> Complete grid with all predefined categories ~100 items <code>simplified</code> Essential categories for basic communication ~50 items <code>empty</code> Empty grid for complete customization 0 items"},{"location":"api/grid/#endpoints","title":"Endpoints","text":""},{"location":"api/grid/#post-apisetup","title":"POST /api/setup","text":"<p>Initialize user's communication grid with a selected template.</p> <p>Protected Endpoint</p> <p>Requires valid JWT token and user must have <code>pending_setup</code> status.</p>"},{"location":"api/grid/#request","title":"Request","text":"<pre><code>POST /api/setup\nAuthorization: Bearer &lt;jwt-token&gt;\nContent-Type: application/json\n\n{\n  \"gridType\": \"default\"\n}\n</code></pre>"},{"location":"api/grid/#request-body","title":"Request Body","text":"Field Type Required Description <code>gridType</code> string Yes Template type: <code>default</code>, <code>simplified</code>, or <code>empty</code>"},{"location":"api/grid/#response","title":"Response","text":"Success (201 Created)Already Setup (409 Conflict)Invalid Template (400 Bad Request) <pre><code>{\n  \"message\": \"Grid setup completed successfully\",\n  \"gridType\": \"default\",\n  \"itemsCreated\": 98,\n  \"categories\": [\n    \"verbi\",\n    \"sostantivi\", \n    \"aggettivi\",\n    \"azioni\",\n    \"system\"\n  ]\n}\n</code></pre> <pre><code>{\n  \"error\": \"User has already completed setup\"\n}\n</code></pre> <pre><code>{\n  \"error\": \"Invalid grid type. Must be: default, simplified, or empty\"\n}\n</code></pre>"},{"location":"api/grid/#example-usage","title":"Example Usage","text":"<pre><code>const setupGrid = async (gridType) =&gt; {\n  const response = await fetch('/api/setup', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${localStorage.getItem('authToken')}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ gridType })\n  });\n\n  const result = await response.json();\n\n  if (response.ok) {\n    console.log(`Grid setup complete: ${result.itemsCreated} items created`);\n    // Proceed to complete setup\n  } else {\n    console.error('Setup failed:', result.error);\n  }\n};\n</code></pre>"},{"location":"api/grid/#post-apicomplete-setup","title":"POST /api/complete-setup","text":"<p>Mark the user's setup as complete and activate their account.</p> <p>Protected Endpoint</p> <p>Requires valid JWT token.</p>"},{"location":"api/grid/#request_1","title":"Request","text":"<pre><code>POST /api/complete-setup\nAuthorization: Bearer &lt;jwt-token&gt;\n</code></pre>"},{"location":"api/grid/#response_1","title":"Response","text":"Success (200 OK)Already Active (409 Conflict) <pre><code>{\n  \"message\": \"Setup completed successfully\",\n  \"user\": {\n    \"id\": 1,\n    \"username\": \"john_doe\", \n    \"status\": \"active\"\n  }\n}\n</code></pre> <pre><code>{\n  \"error\": \"User is already active\"\n}\n</code></pre>"},{"location":"api/grid/#example-usage_1","title":"Example Usage","text":"<pre><code>const completeSetup = async () =&gt; {\n  const response = await fetch('/api/complete-setup', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n    }\n  });\n\n  if (response.ok) {\n    // Update user status in localStorage\n    const user = JSON.parse(localStorage.getItem('user'));\n    user.status = 'active';\n    localStorage.setItem('user', JSON.stringify(user));\n\n    // Redirect to main grid\n    window.location.href = '/';\n  }\n};\n</code></pre>"},{"location":"api/grid/#get-apigrid","title":"GET /api/grid","text":"<p>Retrieve the user's complete communication grid.</p> <p>Protected Endpoint</p> <p>Requires valid JWT token.</p>"},{"location":"api/grid/#request_2","title":"Request","text":"<pre><code>GET /api/grid\nAuthorization: Bearer &lt;jwt-token&gt;\n</code></pre>"},{"location":"api/grid/#response_2","title":"Response","text":"Success (200 OK)No Grid Found (404 Not Found) <pre><code>{\n  \"items\": [\n    {\n      \"id\": 1,\n      \"user_id\": 1,\n      \"type\": \"category\",\n      \"label\": \"Verbi\",\n      \"icon\": \"fa-play\",\n      \"color\": \"#4CAF50\",\n      \"category\": \"verbi\",\n      \"parent_id\": null,\n      \"order_index\": 1,\n      \"visible\": true\n    },\n    {\n      \"id\": 2,\n      \"user_id\": 1,\n      \"type\": \"item\",\n      \"label\": \"Mangiare\",\n      \"icon\": \"fa-utensils\",\n      \"color\": \"#FF9800\",\n      \"text\": \"mangiare\",\n      \"speak\": \"mangiare\",\n      \"category\": \"verbi\",\n      \"parent_id\": 1,\n      \"order_index\": 1,\n      \"visible\": true\n    }\n  ],\n  \"categories\": [\"verbi\", \"sostantivi\", \"azioni\", \"system\"],\n  \"totalItems\": 98,\n  \"lastUpdated\": \"2025-01-15T10:30:00Z\"\n}\n</code></pre> <pre><code>{\n  \"error\": \"No grid found for user. Please complete setup first.\",\n  \"items\": [],\n  \"categories\": []\n}\n</code></pre>"},{"location":"api/grid/#response-fields","title":"Response Fields","text":"Field Type Description <code>items</code> array Complete list of grid items <code>categories</code> array List of available categories <code>totalItems</code> number Total count of visible items <code>lastUpdated</code> string ISO timestamp of last modification"},{"location":"api/grid/#grid-item-structure","title":"Grid Item Structure","text":"Field Type Description <code>id</code> number Unique item identifier <code>user_id</code> number Owner user ID <code>type</code> string Item type: <code>category</code>, <code>item</code>, <code>action</code> <code>label</code> string Display text <code>icon</code> string Icon identifier (Font Awesome class) <code>color</code> string Color code (hex format) <code>text</code> string Extended text content <code>speak</code> string Text-to-speech content <code>action</code> string Action type for system items <code>category</code> string Category classification <code>parent_id</code> number/null Parent item ID for hierarchy <code>order_index</code> number Display order within category <code>visible</code> boolean Visibility flag"},{"location":"api/grid/#example-usage_2","title":"Example Usage","text":"<pre><code>const loadGrid = async () =&gt; {\n  const response = await fetch('/api/grid', {\n    headers: {\n      'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n    }\n  });\n\n  const gridData = await response.json();\n\n  if (response.ok) {\n    console.log(`Loaded ${gridData.totalItems} grid items`);\n\n    // Organize items by category\n    const itemsByCategory = {};\n    gridData.items.forEach(item =&gt; {\n      if (!itemsByCategory[item.category]) {\n        itemsByCategory[item.category] = [];\n      }\n      itemsByCategory[item.category].push(item);\n    });\n\n    return itemsByCategory;\n  } else {\n    console.error('Failed to load grid:', gridData.error);\n  }\n};\n</code></pre>"},{"location":"api/grid/#post-apigrid","title":"POST /api/grid","text":"<p>Save the entire grid (bulk update operation).</p> <p>Protected Endpoint</p> <p>Requires valid JWT token.</p>"},{"location":"api/grid/#request_3","title":"Request","text":"<pre><code>POST /api/grid\nAuthorization: Bearer &lt;jwt-token&gt;\nContent-Type: application/json\n\n{\n  \"items\": [\n    {\n      \"id\": 1,\n      \"type\": \"category\",\n      \"label\": \"Verbi Modificati\",\n      \"icon\": \"fa-play\",\n      \"color\": \"#4CAF50\",\n      \"category\": \"verbi\",\n      \"order_index\": 1,\n      \"visible\": true\n    }\n  ]\n}\n</code></pre>"},{"location":"api/grid/#request-body_1","title":"Request Body","text":"Field Type Required Description <code>items</code> array Yes Complete array of grid items"},{"location":"api/grid/#response_3","title":"Response","text":"Success (200 OK)Validation Error (400 Bad Request) <pre><code>{\n  \"message\": \"Grid saved successfully\",\n  \"itemsUpdated\": 15,\n  \"itemsCreated\": 2,\n  \"itemsDeleted\": 1,\n  \"timestamp\": \"2025-01-15T10:35:00Z\"\n}\n</code></pre> <pre><code>{\n  \"error\": \"Invalid grid data\",\n  \"details\": \"Item at index 5 is missing required 'type' field\"\n}\n</code></pre>"},{"location":"api/grid/#post-apigriditem","title":"POST /api/grid/item","text":"<p>Create a new grid item.</p> <p>Protected Endpoint</p> <p>Requires valid JWT token.</p>"},{"location":"api/grid/#request_4","title":"Request","text":"<pre><code>POST /api/grid/item\nAuthorization: Bearer &lt;jwt-token&gt;\nContent-Type: application/json\n\n{\n  \"type\": \"item\",\n  \"label\": \"Camminare\",\n  \"icon\": \"fa-walking\",\n  \"color\": \"#9C27B0\",\n  \"text\": \"camminare\",\n  \"speak\": \"camminare\",\n  \"category\": \"verbi\",\n  \"parent_id\": 1,\n  \"order_index\": 10,\n  \"visible\": true\n}\n</code></pre>"},{"location":"api/grid/#request-body_2","title":"Request Body","text":"Field Type Required Description <code>type</code> string Yes Item type: <code>category</code>, <code>item</code>, <code>action</code> <code>label</code> string Yes Display text <code>icon</code> string No Icon identifier <code>color</code> string No Color code <code>text</code> string No Extended text content <code>speak</code> string No Text-to-speech content <code>action</code> string No Action type (for system items) <code>category</code> string Yes Category classification <code>parent_id</code> number No Parent item ID <code>order_index</code> number No Display order (default: 0) <code>visible</code> boolean No Visibility flag (default: true)"},{"location":"api/grid/#response_4","title":"Response","text":"Success (201 Created) <pre><code>{\n  \"message\": \"Grid item created successfully\",\n  \"item\": {\n    \"id\": 99,\n    \"user_id\": 1,\n    \"type\": \"item\",\n    \"label\": \"Camminare\",\n    \"icon\": \"fa-walking\",\n    \"color\": \"#9C27B0\",\n    \"text\": \"camminare\",\n    \"speak\": \"camminare\",\n    \"category\": \"verbi\",\n    \"parent_id\": 1,\n    \"order_index\": 10,\n    \"visible\": true,\n    \"created_at\": \"2025-01-15T10:40:00Z\"\n  }\n}\n</code></pre>"},{"location":"api/grid/#example-usage_3","title":"Example Usage","text":"<pre><code>const createGridItem = async (itemData) =&gt; {\n  const response = await fetch('/api/grid/item', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${localStorage.getItem('authToken')}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(itemData)\n  });\n\n  const result = await response.json();\n\n  if (response.ok) {\n    console.log('Item created:', result.item);\n    return result.item;\n  } else {\n    console.error('Failed to create item:', result.error);\n    throw new Error(result.error);\n  }\n};\n</code></pre>"},{"location":"api/grid/#put-apigriditemid","title":"PUT /api/grid/item/:id","text":"<p>Update an existing grid item.</p> <p>Protected Endpoint</p> <p>Requires valid JWT token. Users can only update their own items.</p>"},{"location":"api/grid/#request_5","title":"Request","text":"<pre><code>PUT /api/grid/item/99\nAuthorization: Bearer &lt;jwt-token&gt;\nContent-Type: application/json\n\n{\n  \"label\": \"Camminare Velocemente\",\n  \"color\": \"#E91E63\",\n  \"order_index\": 5\n}\n</code></pre>"},{"location":"api/grid/#url-parameters","title":"URL Parameters","text":"Parameter Type Description <code>id</code> number Grid item ID to update"},{"location":"api/grid/#request-body_3","title":"Request Body","text":"<p>Send only the fields you want to update. All fields from the create endpoint are supported.</p>"},{"location":"api/grid/#response_5","title":"Response","text":"Success (200 OK)Not Found (404 Not Found) <pre><code>{\n  \"message\": \"Grid item updated successfully\", \n  \"item\": {\n    \"id\": 99,\n    \"user_id\": 1,\n    \"type\": \"item\",\n    \"label\": \"Camminare Velocemente\",\n    \"icon\": \"fa-walking\",\n    \"color\": \"#E91E63\",\n    \"text\": \"camminare\",\n    \"speak\": \"camminare\",\n    \"category\": \"verbi\", \n    \"parent_id\": 1,\n    \"order_index\": 5,\n    \"visible\": true,\n    \"updated_at\": \"2025-01-15T10:45:00Z\"\n  }\n}\n</code></pre> <pre><code>{\n  \"error\": \"Grid item not found or access denied\"\n}\n</code></pre>"},{"location":"api/grid/#example-usage_4","title":"Example Usage","text":"<pre><code>const updateGridItem = async (itemId, updates) =&gt; {\n  const response = await fetch(`/api/grid/item/${itemId}`, {\n    method: 'PUT',\n    headers: {\n      'Authorization': `Bearer ${localStorage.getItem('authToken')}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(updates)\n  });\n\n  const result = await response.json();\n\n  if (response.ok) {\n    console.log('Item updated:', result.item);\n    return result.item;\n  } else {\n    console.error('Failed to update item:', result.error);\n    throw new Error(result.error);\n  }\n};\n</code></pre>"},{"location":"api/grid/#delete-apigriditemid","title":"DELETE /api/grid/item/:id","text":"<p>Delete a grid item (soft delete).</p> <p>Protected Endpoint</p> <p>Requires valid JWT token. Users can only delete their own items.</p>"},{"location":"api/grid/#request_6","title":"Request","text":"<pre><code>DELETE /api/grid/item/99\nAuthorization: Bearer &lt;jwt-token&gt;\n</code></pre>"},{"location":"api/grid/#url-parameters_1","title":"URL Parameters","text":"Parameter Type Description <code>id</code> number Grid item ID to delete"},{"location":"api/grid/#response_6","title":"Response","text":"Success (200 OK)Not Found (404 Not Found) <pre><code>{\n  \"message\": \"Grid item deleted successfully\",\n  \"itemId\": 99\n}\n</code></pre> <pre><code>{\n  \"error\": \"Grid item not found or access denied\"\n}\n</code></pre>"},{"location":"api/grid/#example-usage_5","title":"Example Usage","text":"<pre><code>const deleteGridItem = async (itemId) =&gt; {\n  const response = await fetch(`/api/grid/item/${itemId}`, {\n    method: 'DELETE',\n    headers: {\n      'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n    }\n  });\n\n  const result = await response.json();\n\n  if (response.ok) {\n    console.log('Item deleted:', result.itemId);\n    return true;\n  } else {\n    console.error('Failed to delete item:', result.error);\n    throw new Error(result.error);\n  }\n};\n</code></pre>"},{"location":"api/grid/#grid-templates-details","title":"Grid Templates Details","text":""},{"location":"api/grid/#default-template","title":"Default Template","text":"<p>The default template includes comprehensive categories:</p> <pre><code>const defaultCategories = [\n  {\n    name: \"verbi\",\n    label: \"Verbi\",\n    icon: \"fa-play\",\n    color: \"#4CAF50\",\n    items: [\"essere\", \"avere\", \"andare\", \"fare\", \"dire\", \"mangiare\", \"bere\", ...]\n  },\n  {\n    name: \"sostantivi\", \n    label: \"Sostantivi\",\n    icon: \"fa-cube\",\n    color: \"#FF9800\",\n    items: [\"casa\", \"auto\", \"libro\", \"acqua\", \"cibo\", ...]\n  },\n  {\n    name: \"aggettivi\",\n    label: \"Aggettivi\", \n    icon: \"fa-star\",\n    color: \"#E91E63\",\n    items: [\"bello\", \"grande\", \"piccolo\", \"buono\", \"cattivo\", ...]\n  },\n  {\n    name: \"azioni\",\n    label: \"Azioni\",\n    icon: \"fa-bolt\", \n    color: \"#9C27B0\",\n    items: [\"aprire\", \"chiudere\", \"accendere\", \"spegnere\", ...]\n  },\n  {\n    name: \"system\",\n    label: \"Sistema\",\n    icon: \"fa-cog\",\n    color: \"#607D8B\", \n    actions: [\"presente\", \"passato\", \"futuro\", \"cancella\", \"indietro\"]\n  }\n];\n</code></pre>"},{"location":"api/grid/#simplified-template","title":"Simplified Template","text":"<p>Focused on essential communication:</p> <pre><code>const simplifiedCategories = [\n  {\n    name: \"base\",\n    label: \"Base\", \n    items: [\"io\", \"tu\", \"lui\", \"lei\", \"noi\", \"voi\", \"loro\"]\n  },\n  {\n    name: \"verbi_comuni\",\n    label: \"Verbi Comuni\",\n    items: [\"essere\", \"avere\", \"andare\", \"volere\", \"mangiare\"]\n  },\n  {\n    name: \"sostantivi_comuni\", \n    label: \"Sostantivi Comuni\",\n    items: [\"casa\", \"acqua\", \"cibo\", \"famiglia\", \"tempo\"]\n  },\n  {\n    name: \"system\",\n    label: \"Sistema\",\n    actions: [\"presente\", \"cancella\"]\n  }\n];\n</code></pre>"},{"location":"api/grid/#frontend-integration","title":"Frontend Integration","text":""},{"location":"api/grid/#complete-grid-management-class","title":"Complete Grid Management Class","text":"<pre><code>class GridManager {\n  constructor() {\n    this.authToken = localStorage.getItem('authToken');\n    this.baseURL = '/api';\n  }\n\n  getHeaders() {\n    return {\n      'Authorization': `Bearer ${this.authToken}`,\n      'Content-Type': 'application/json'\n    };\n  }\n\n  async setupGrid(gridType) {\n    const response = await fetch(`${this.baseURL}/setup`, {\n      method: 'POST',\n      headers: this.getHeaders(),\n      body: JSON.stringify({ gridType })\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error);\n    }\n\n    return response.json();\n  }\n\n  async completeSetup() {\n    const response = await fetch(`${this.baseURL}/complete-setup`, {\n      method: 'POST',\n      headers: this.getHeaders()\n    });\n\n    return response.json();\n  }\n\n  async loadGrid() {\n    const response = await fetch(`${this.baseURL}/grid`, {\n      headers: this.getHeaders()\n    });\n\n    return response.json();\n  }\n\n  async saveGrid(items) {\n    const response = await fetch(`${this.baseURL}/grid`, {\n      method: 'POST', \n      headers: this.getHeaders(),\n      body: JSON.stringify({ items })\n    });\n\n    return response.json();\n  }\n\n  async createItem(itemData) {\n    const response = await fetch(`${this.baseURL}/grid/item`, {\n      method: 'POST',\n      headers: this.getHeaders(),\n      body: JSON.stringify(itemData)\n    });\n\n    return response.json();\n  }\n\n  async updateItem(itemId, updates) {\n    const response = await fetch(`${this.baseURL}/grid/item/${itemId}`, {\n      method: 'PUT',\n      headers: this.getHeaders(), \n      body: JSON.stringify(updates)\n    });\n\n    return response.json();\n  }\n\n  async deleteItem(itemId) {\n    const response = await fetch(`${this.baseURL}/grid/item/${itemId}`, {\n      method: 'DELETE',\n      headers: this.getHeaders()\n    });\n\n    return response.json();\n  }\n}\n</code></pre> <p>Next: AI Services API \u2192</p>"},{"location":"architecture/database/","title":"Database Schema","text":"<p>Web App CAA uses a simple yet flexible database schema designed to support user management and customizable communication grids. The schema supports both SQLite (for development) and MySQL (for production).</p>"},{"location":"architecture/database/#database-overview","title":"Database Overview","text":"<p>The application uses two main entities: - Users: Authentication and user management - Grid Items: Communication grid elements with hierarchical organization</p>"},{"location":"architecture/database/#entity-relationship-diagram","title":"Entity Relationship Diagram","text":"<pre><code>erDiagram\n    USERS {\n        uint id PK\n        string username UK\n        string password\n        string status\n        datetime created_at\n        datetime updated_at\n        datetime deleted_at\n    }\n\n    GRID_ITEMS {\n        uint id PK\n        uint user_id FK\n        string type\n        string label\n        string icon\n        string color\n        string text\n        string speak\n        string action\n        string category\n        uint parent_id FK\n        uint order_index\n        boolean visible\n        datetime created_at\n        datetime updated_at\n        datetime deleted_at\n    }\n\n    USERS ||--o{ GRID_ITEMS : owns\n    GRID_ITEMS ||--o{ GRID_ITEMS : contains</code></pre>"},{"location":"architecture/database/#table-definitions","title":"Table Definitions","text":""},{"location":"architecture/database/#users-table","title":"Users Table","text":"<p>The <code>users</code> table manages user authentication and account information.</p> <pre><code>CREATE TABLE users (\n    id            INTEGER      PRIMARY KEY AUTOINCREMENT,  -- SQLite\n    -- id         BIGINT       PRIMARY KEY AUTO_INCREMENT,  -- MySQL\n    username      VARCHAR(255) UNIQUE NOT NULL,\n    password      VARCHAR(255) NOT NULL,\n    status        VARCHAR(50)  DEFAULT 'pending_setup',\n    created_at    DATETIME,\n    updated_at    DATETIME,\n    deleted_at    DATETIME     -- Soft delete support\n);\n\n-- Indexes\nCREATE UNIQUE INDEX idx_users_username ON users(username);\nCREATE INDEX idx_users_deleted_at ON users(deleted_at);\n</code></pre>"},{"location":"architecture/database/#user-fields","title":"User Fields","text":"Field Type Constraints Description <code>id</code> uint Primary Key, Auto Increment Unique user identifier <code>username</code> string Unique, Not Null User's login name <code>password</code> string Not Null bcrypt hashed password <code>status</code> string Default: 'pending_setup' User account status <code>created_at</code> datetime Auto-managed Account creation timestamp <code>updated_at</code> datetime Auto-managed Last modification timestamp <code>deleted_at</code> datetime Nullable Soft delete timestamp"},{"location":"architecture/database/#user-status-values","title":"User Status Values","text":"Status Description <code>pending_setup</code> User registered but hasn't completed initial setup <code>active</code> User has completed setup and can use the application <code>disabled</code> User account is temporarily disabled"},{"location":"architecture/database/#grid-items-table","title":"Grid Items Table","text":"<p>The <code>grid_items</code> table stores all communication grid elements for all users.</p> <pre><code>CREATE TABLE grid_items (\n    id            INTEGER      PRIMARY KEY AUTOINCREMENT,  -- SQLite\n    -- id         BIGINT       PRIMARY KEY AUTO_INCREMENT,  -- MySQL\n    user_id       INTEGER      NOT NULL,\n    type          VARCHAR(50)  NOT NULL,\n    label         VARCHAR(255),\n    icon          VARCHAR(255),\n    color         VARCHAR(50),\n    text          TEXT,\n    speak         VARCHAR(255),\n    action        VARCHAR(100),\n    category      VARCHAR(100),\n    parent_id     INTEGER,\n    order_index   INTEGER      DEFAULT 0,\n    visible       BOOLEAN      DEFAULT true,\n    created_at    DATETIME,\n    updated_at    DATETIME,\n    deleted_at    DATETIME,\n\n    -- Foreign key constraints\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,\n    FOREIGN KEY (parent_id) REFERENCES grid_items(id) ON DELETE SET NULL\n);\n\n-- Indexes\nCREATE INDEX idx_grid_items_user_id ON grid_items(user_id);\nCREATE INDEX idx_grid_items_parent_id ON grid_items(parent_id);\nCREATE INDEX idx_grid_items_category ON grid_items(category);\nCREATE INDEX idx_grid_items_type ON grid_items(type);\nCREATE INDEX idx_grid_items_deleted_at ON grid_items(deleted_at);\nCREATE INDEX idx_grid_items_user_category ON grid_items(user_id, category);\n</code></pre>"},{"location":"architecture/database/#grid-item-fields","title":"Grid Item Fields","text":"Field Type Constraints Description <code>id</code> uint Primary Key, Auto Increment Unique item identifier <code>user_id</code> uint Foreign Key, Not Null Owner of this grid item <code>type</code> string Not Null Item type (category, item, action) <code>label</code> string Display text for the item <code>icon</code> string Icon identifier or path <code>color</code> string Color code (hex, rgb, or name) <code>text</code> string Extended text content <code>speak</code> string Text-to-speech content <code>action</code> string Action type when item is selected <code>category</code> string Category classification <code>parent_id</code> uint Foreign Key, Nullable Parent item for hierarchy <code>order_index</code> uint Default: 0 Display order within category <code>visible</code> bool Default: true Whether item is visible"},{"location":"architecture/database/#item-types","title":"Item Types","text":"Type Description Usage <code>category</code> Top-level category Groups related items <code>item</code> Communication item Basic grid element <code>action</code> System action Special functionality <code>separator</code> Visual separator UI organization"},{"location":"architecture/database/#action-types","title":"Action Types","text":"Action Description <code>speak</code> Text-to-speech <code>clear</code> Clear current sentence <code>backspace</code> Remove last word <code>conjugate_presente</code> Conjugate to present tense <code>conjugate_passato</code> Conjugate to past tense <code>conjugate_futuro</code> Conjugate to future tense <code>correct_sentence</code> AI sentence correction"},{"location":"architecture/database/#gorm-model-definitions","title":"GORM Model Definitions","text":""},{"location":"architecture/database/#user-model","title":"User Model","text":"<pre><code>type User struct {\n    ID        uint      `gorm:\"primaryKey\" json:\"id\"`\n    Username  string    `gorm:\"unique;not null\" json:\"username\"`\n    Password  string    `gorm:\"not null\" json:\"-\"` // Never serialize password\n    Status    string    `gorm:\"default:pending_setup\" json:\"status\"`\n    CreatedAt time.Time `json:\"created_at\"`\n    UpdatedAt time.Time `json:\"updated_at\"`\n    DeletedAt gorm.DeletedAt `gorm:\"index\" json:\"-\"`\n\n    // Relationships\n    GridItems []GridItem `gorm:\"foreignKey:UserID;constraint:OnDelete:CASCADE\" json:\"grid_items,omitempty\"`\n}\n\n// Table name override (optional)\nfunc (User) TableName() string {\n    return \"users\"\n}\n</code></pre>"},{"location":"architecture/database/#grid-item-model","title":"Grid Item Model","text":"<pre><code>type GridItem struct {\n    ID         uint   `gorm:\"primaryKey\" json:\"id\"`\n    UserID     uint   `gorm:\"not null;index\" json:\"user_id\"`\n    Type       string `gorm:\"not null;index\" json:\"type\"`\n    Label      string `json:\"label\"`\n    Icon       string `json:\"icon\"`\n    Color      string `json:\"color\"`\n    Text       string `json:\"text\"`\n    Speak      string `json:\"speak\"`\n    Action     string `json:\"action\"`\n    Category   string `gorm:\"index\" json:\"category\"`\n    ParentID   *uint  `gorm:\"index\" json:\"parent_id\"` // Nullable for root items\n    OrderIndex uint   `gorm:\"default:0\" json:\"order_index\"`\n    Visible    bool   `gorm:\"default:true\" json:\"visible\"`\n    CreatedAt  time.Time `json:\"created_at\"`\n    UpdatedAt  time.Time `json:\"updated_at\"`\n    DeletedAt  gorm.DeletedAt `gorm:\"index\" json:\"-\"`\n\n    // Relationships\n    User     User        `gorm:\"constraint:OnDelete:CASCADE\" json:\"user,omitempty\"`\n    Parent   *GridItem   `gorm:\"foreignKey:ParentID\" json:\"parent,omitempty\"`\n    Children []GridItem  `gorm:\"foreignKey:ParentID\" json:\"children,omitempty\"`\n}\n\n// Table name override\nfunc (GridItem) TableName() string {\n    return \"grid_items\"\n}\n</code></pre>"},{"location":"architecture/database/#database-operations","title":"Database Operations","text":""},{"location":"architecture/database/#common-queries","title":"Common Queries","text":""},{"location":"architecture/database/#user-operations","title":"User Operations","text":"<pre><code>// Create user\nfunc CreateUser(db *gorm.DB, user *User) error {\n    return db.Create(user).Error\n}\n\n// Find user by username\nfunc FindUserByUsername(db *gorm.DB, username string) (*User, error) {\n    var user User\n    err := db.Where(\"username = ?\", username).First(&amp;user).Error\n    return &amp;user, err\n}\n\n// Update user status\nfunc UpdateUserStatus(db *gorm.DB, userID uint, status string) error {\n    return db.Model(&amp;User{}).Where(\"id = ?\", userID).\n        Update(\"status\", status).Error\n}\n</code></pre>"},{"location":"architecture/database/#grid-operations","title":"Grid Operations","text":"<pre><code>// Get user's grid items\nfunc GetUserGridItems(db *gorm.DB, userID uint) ([]GridItem, error) {\n    var items []GridItem\n    err := db.Where(\"user_id = ? AND visible = ?\", userID, true).\n        Order(\"category, order_index\").\n        Find(&amp;items).Error\n    return items, err\n}\n\n// Create grid item\nfunc CreateGridItem(db *gorm.DB, item *GridItem) error {\n    return db.Create(item).Error\n}\n\n// Update grid item\nfunc UpdateGridItem(db *gorm.DB, item *GridItem) error {\n    return db.Save(item).Error\n}\n\n// Delete grid item (soft delete)\nfunc DeleteGridItem(db *gorm.DB, itemID, userID uint) error {\n    return db.Where(\"id = ? AND user_id = ?\", itemID, userID).\n        Delete(&amp;GridItem{}).Error\n}\n</code></pre>"},{"location":"architecture/database/#bulk-operations","title":"Bulk Operations","text":"<pre><code>// Bulk create grid items (for setup)\nfunc BulkCreateGridItems(db *gorm.DB, items []GridItem) error {\n    return db.Transaction(func(tx *gorm.DB) error {\n        return tx.CreateInBatches(items, 100).Error\n    })\n}\n\n// Get items by category\nfunc GetItemsByCategory(db *gorm.DB, userID uint, category string) ([]GridItem, error) {\n    var items []GridItem\n    err := db.Where(\"user_id = ? AND category = ? AND visible = ?\", \n        userID, category, true).\n        Order(\"order_index\").\n        Find(&amp;items).Error\n    return items, err\n}\n</code></pre>"},{"location":"architecture/database/#database-migrations","title":"Database Migrations","text":"<p>GORM handles automatic migrations when the application starts:</p> <pre><code>func Initialize() {\n    // Connect to database\n    db, err := gorm.Open(sqlite.Open(\"database.sqlite\"), &amp;gorm.Config{})\n    if err != nil {\n        log.Fatal(\"Failed to connect to database:\", err)\n    }\n\n    // Auto-migrate schemas\n    db.AutoMigrate(&amp;User{}, &amp;GridItem{})\n\n    // Set up foreign key constraints (SQLite specific)\n    db.Exec(\"PRAGMA foreign_keys = ON\")\n}\n</code></pre>"},{"location":"architecture/database/#sample-data-structure","title":"Sample Data Structure","text":""},{"location":"architecture/database/#user-record","title":"User Record","text":"<pre><code>{\n    \"id\": 1,\n    \"username\": \"john_doe\",\n    \"password\": \"$2a$10$...\", // bcrypt hash\n    \"status\": \"active\",\n    \"created_at\": \"2025-01-01T10:00:00Z\",\n    \"updated_at\": \"2025-01-01T10:30:00Z\"\n}\n</code></pre>"},{"location":"architecture/database/#grid-item-records","title":"Grid Item Records","text":""},{"location":"architecture/database/#category-item","title":"Category Item","text":"<pre><code>{\n    \"id\": 1,\n    \"user_id\": 1,\n    \"type\": \"category\",\n    \"label\": \"Azioni\",\n    \"icon\": \"fa-play\",\n    \"color\": \"#4CAF50\",\n    \"category\": \"actions\",\n    \"parent_id\": null,\n    \"order_index\": 1,\n    \"visible\": true\n}\n</code></pre>"},{"location":"architecture/database/#communication-item","title":"Communication Item","text":"<pre><code>{\n    \"id\": 2,\n    \"user_id\": 1,\n    \"type\": \"item\",\n    \"label\": \"Mangiare\",\n    \"icon\": \"fa-utensils\",\n    \"color\": \"#FF9800\",\n    \"text\": \"mangiare\",\n    \"speak\": \"mangiare\",\n    \"category\": \"verbi\",\n    \"parent_id\": 1,\n    \"order_index\": 1,\n    \"visible\": true\n}\n</code></pre>"},{"location":"architecture/database/#action-item","title":"Action Item","text":"<pre><code>{\n    \"id\": 3,\n    \"user_id\": 1,\n    \"type\": \"action\",\n    \"label\": \"Presente\",\n    \"icon\": \"fa-clock\",\n    \"color\": \"#2196F3\",\n    \"action\": \"conjugate_presente\",\n    \"category\": \"system\",\n    \"order_index\": 1,\n    \"visible\": true\n}\n</code></pre>"},{"location":"architecture/database/#performance-considerations","title":"Performance Considerations","text":""},{"location":"architecture/database/#indexing-strategy","title":"Indexing Strategy","text":"<ol> <li>Primary Keys: Automatic indexing on <code>id</code> fields</li> <li>Foreign Keys: Indexes on <code>user_id</code> and <code>parent_id</code></li> <li>Query Optimization: Indexes on frequently queried fields</li> <li>Composite Indexes: <code>(user_id, category)</code> for grid queries</li> </ol>"},{"location":"architecture/database/#connection-pooling","title":"Connection Pooling","text":"<pre><code>// MySQL connection pool settings\ndb, err := gorm.Open(mysql.Open(dsn), &amp;gorm.Config{})\nif err != nil {\n    log.Fatal(err)\n}\n\nsqlDB, _ := db.DB()\nsqlDB.SetMaxOpenConns(25)\nsqlDB.SetMaxIdleConns(5)\nsqlDB.SetConnMaxLifetime(5 * time.Minute)\n</code></pre>"},{"location":"architecture/database/#query-optimization","title":"Query Optimization","text":"<ol> <li>Eager Loading: Use <code>Preload()</code> for related data</li> <li>Selective Fields: Use <code>Select()</code> to limit returned columns</li> <li>Batch Operations: Use <code>CreateInBatches()</code> for bulk inserts</li> <li>Soft Deletes: Automatic handling with GORM</li> </ol>"},{"location":"architecture/database/#backup-and-recovery","title":"Backup and Recovery","text":""},{"location":"architecture/database/#sqlite-backup","title":"SQLite Backup","text":"<pre><code># Create backup\nsqlite3 database.sqlite \".backup backup.sqlite\"\n\n# Restore from backup\ncp backup.sqlite database.sqlite\n</code></pre>"},{"location":"architecture/database/#mysql-backup","title":"MySQL Backup","text":"<pre><code># Create backup\nmysqldump -u username -p webapp_caa &gt; backup.sql\n\n# Restore from backup\nmysql -u username -p webapp_caa &lt; backup.sql\n</code></pre> <p>Next: API Reference \u2192</p>"},{"location":"architecture/overview/","title":"Architecture Overview","text":"<p>Web App CAA follows a clean, layered architecture that promotes maintainability, testability, and scalability. This document provides an overview of the system design, component interactions, and architectural decisions.</p>"},{"location":"architecture/overview/#system-architecture","title":"System Architecture","text":"<pre><code>graph TB\n    subgraph \"Client Layer\"\n        UI[Web UI]\n        API_CLIENT[API Client]\n    end\n\n    subgraph \"Web Server (Gin)\"\n        MIDDLEWARE[Middleware Layer]\n        ROUTES[Route Handlers]\n        STATIC[Static File Server]\n    end\n\n    subgraph \"Application Layer\"\n        AUTH_H[Auth Handlers]\n        GRID_H[Grid Handlers]\n        AI_H[AI Handlers]\n        PAGE_H[Page Handlers]\n    end\n\n    subgraph \"Service Layer\"\n        USER_S[User Service]\n        GRID_S[Grid Service]\n        AI_S[AI Service]\n        LLM_S[LLM Service]\n    end\n\n    subgraph \"Data Layer\"\n        DB[Database Layer]\n        MODELS[Data Models]\n    end\n\n    subgraph \"External Services\"\n        OLLAMA[Ollama API]\n        OPENAI[OpenAI API]\n        SQLITE[SQLite DB]\n        MYSQL[MySQL DB]\n    end\n\n    UI --&gt; MIDDLEWARE\n    API_CLIENT --&gt; MIDDLEWARE\n    MIDDLEWARE --&gt; ROUTES\n    ROUTES --&gt; STATIC\n    ROUTES --&gt; AUTH_H\n    ROUTES --&gt; GRID_H\n    ROUTES --&gt; AI_H\n    ROUTES --&gt; PAGE_H\n\n    AUTH_H --&gt; USER_S\n    GRID_H --&gt; GRID_S\n    AI_H --&gt; AI_S\n\n    AI_S --&gt; LLM_S\n    LLM_S --&gt; OLLAMA\n    LLM_S --&gt; OPENAI\n\n    USER_S --&gt; DB\n    GRID_S --&gt; DB\n    DB --&gt; MODELS\n\n    DB --&gt; SQLITE\n    DB --&gt; MYSQL</code></pre>"},{"location":"architecture/overview/#architectural-principles","title":"Architectural Principles","text":""},{"location":"architecture/overview/#1-clean-architecture","title":"1. Clean Architecture","text":"<p>The application follows clean architecture principles:</p> <ul> <li>Dependency Inversion: High-level modules don't depend on low-level modules</li> <li>Separation of Concerns: Each layer has a single, well-defined responsibility  </li> <li>Independence: Business logic is independent of frameworks and external services</li> </ul>"},{"location":"architecture/overview/#2-layered-design","title":"2. Layered Design","text":"Layer Responsibility Examples Presentation HTTP handling, routing Gin handlers, middleware Application Request/response processing Handler functions Domain Business logic Services, validation Infrastructure External dependencies Database, AI APIs"},{"location":"architecture/overview/#3-modular-structure","title":"3. Modular Structure","text":"<p>Each module is self-contained with clear interfaces:</p> <ul> <li>Authentication: User registration, login, JWT management</li> <li>Grid Management: CRUD operations, templates, categories</li> <li>AI Services: LLM integration, prompt processing</li> <li>Database: ORM abstraction, migrations</li> </ul>"},{"location":"architecture/overview/#component-details","title":"Component Details","text":""},{"location":"architecture/overview/#web-server-layer","title":"Web Server Layer","text":""},{"location":"architecture/overview/#gin-web-framework","title":"Gin Web Framework","text":"<pre><code>// Main server setup\nr := gin.Default()\nr.Use(middleware.RequestLogging())\nr.Use(corsMiddleware())\n</code></pre> <p>Key Features: - HTTP/HTTPS server - Request routing - Middleware pipeline - Static file serving - Template rendering</p>"},{"location":"architecture/overview/#middleware-stack","title":"Middleware Stack","text":"<ol> <li>Request Logging: Logs all HTTP requests with timing</li> <li>CORS: Cross-Origin Resource Sharing configuration</li> <li>Authentication: JWT token validation for protected routes</li> <li>Error Handling: Centralized error processing</li> </ol>"},{"location":"architecture/overview/#handler-layer","title":"Handler Layer","text":""},{"location":"architecture/overview/#authentication-handlers","title":"Authentication Handlers","text":"<pre><code>type AuthHandlers struct {\n    userService *services.UserService\n}\n</code></pre> <p>Responsibilities: - User registration and login - JWT token generation and validation - Editor password verification - Session management</p>"},{"location":"architecture/overview/#grid-handlers","title":"Grid Handlers","text":"<pre><code>type GridHandlers struct {\n    gridService *services.GridService\n}\n</code></pre> <p>Responsibilities: - Grid template selection - CRUD operations on grid items - Category management - Setup wizard logic</p>"},{"location":"architecture/overview/#ai-handlers","title":"AI Handlers","text":"<pre><code>type AIHandlers struct {\n    aiService *services.AIService\n}\n</code></pre> <p>Responsibilities: - Verb conjugation requests - Sentence correction - AI service proxy functionality</p>"},{"location":"architecture/overview/#service-layer","title":"Service Layer","text":""},{"location":"architecture/overview/#user-service","title":"User Service","text":"<pre><code>type UserService struct {\n    db *gorm.DB\n}\n</code></pre> <p>Features: - Password hashing with bcrypt - User profile management - Status tracking (pending_setup/active) - Database transaction handling</p>"},{"location":"architecture/overview/#grid-service","title":"Grid Service","text":"<pre><code>type GridService struct {\n    db *gorm.DB\n}\n</code></pre> <p>Features: - Grid template loading - Item CRUD operations - Category hierarchy management - Bulk operations for setup</p>"},{"location":"architecture/overview/#ai-service","title":"AI Service","text":"<pre><code>type AIService struct {\n    llmService *LLMService\n}\n</code></pre> <p>Features: - Request routing to appropriate LLM backend - Response processing and formatting - Error handling and fallback logic</p>"},{"location":"architecture/overview/#llm-service","title":"LLM Service","text":"<pre><code>type LLMService struct {\n    backendType    string\n    ollamaClient   ollama.Client\n    openaiClient   *openai.Client\n    templates      map[string]*template.Template\n    ragData        map[string]interface{}\n}\n</code></pre> <p>Features: - Multi-backend LLM support (Ollama, OpenAI) - Template-based prompt generation - RAG (Retrieval-Augmented Generation) knowledge integration - Response parsing and validation</p>"},{"location":"architecture/overview/#data-layer","title":"Data Layer","text":""},{"location":"architecture/overview/#gorm-orm","title":"GORM ORM","text":"<pre><code>type Database struct {\n    DB *gorm.DB\n}\n</code></pre> <p>Features: - Automatic schema migration - Connection pooling - Transaction support - Multi-database support (SQLite, MySQL)</p>"},{"location":"architecture/overview/#data-models","title":"Data Models","text":"<pre><code>type User struct {\n    ID       uint   `gorm:\"primaryKey\"`\n    Username string `gorm:\"unique;not null\"`\n    Password string `gorm:\"not null\"`\n    Status   string `gorm:\"default:pending_setup\"`\n    // ...\n}\n\ntype GridItem struct {\n    ID     uint   `gorm:\"primaryKey\"`\n    UserID uint   `gorm:\"not null\"`\n    Type   string `gorm:\"not null\"`\n    // ...\n}\n</code></pre>"},{"location":"architecture/overview/#data-flow","title":"Data Flow","text":""},{"location":"architecture/overview/#authentication-flow","title":"Authentication Flow","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant Handler\n    participant UserService\n    participant Database\n    participant JWT\n\n    Client-&gt;&gt;Handler: POST /api/login\n    Handler-&gt;&gt;UserService: ValidateCredentials()\n    UserService-&gt;&gt;Database: FindUserByUsername()\n    Database--&gt;&gt;UserService: User data\n    UserService-&gt;&gt;UserService: bcrypt.CompareHashAndPassword()\n    UserService--&gt;&gt;Handler: User validation result\n    Handler-&gt;&gt;JWT: GenerateToken()\n    JWT--&gt;&gt;Handler: JWT token\n    Handler--&gt;&gt;Client: {token, user}</code></pre>"},{"location":"architecture/overview/#grid-management-flow","title":"Grid Management Flow","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant Handler\n    participant GridService\n    participant Database\n\n    Client-&gt;&gt;Handler: POST /api/setup\n    Handler-&gt;&gt;GridService: CreateUserGrid(template)\n    GridService-&gt;&gt;GridService: LoadTemplate()\n    GridService-&gt;&gt;Database: Transaction Begin\n    GridService-&gt;&gt;Database: BulkInsert(items)\n    Database--&gt;&gt;GridService: Insert results\n    GridService-&gt;&gt;Database: Transaction Commit\n    GridService--&gt;&gt;Handler: Success\n    Handler--&gt;&gt;Client: Grid created</code></pre>"},{"location":"architecture/overview/#ai-service-flow","title":"AI Service Flow","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant Handler\n    participant AIService\n    participant LLMService\n    participant Template\n    participant LLM\n\n    Client-&gt;&gt;Handler: POST /api/conjugate\n    Handler-&gt;&gt;AIService: Conjugate(request)\n    AIService-&gt;&gt;LLMService: ConjugateWithTemplates()\n    LLMService-&gt;&gt;Template: RenderTemplate(data)\n    Template--&gt;&gt;LLMService: Prompt\n    LLMService-&gt;&gt;LLM: API Request\n    LLM--&gt;&gt;LLMService: Response\n    LLMService-&gt;&gt;LLMService: ParseJSON()\n    LLMService--&gt;&gt;AIService: Conjugations\n    AIService--&gt;&gt;Handler: Result\n    Handler--&gt;&gt;Client: Conjugated verbs</code></pre>"},{"location":"architecture/overview/#technology-stack","title":"Technology Stack","text":""},{"location":"architecture/overview/#core-technologies","title":"Core Technologies","text":"Component Technology Version Purpose Language Go 1.21+ Main programming language Web Framework Gin 1.10+ HTTP server and routing ORM GORM 1.30+ Database abstraction Authentication JWT-Go 5.3+ Token-based auth Password Hashing bcrypt - Secure password storage"},{"location":"architecture/overview/#database-support","title":"Database Support","text":"Database Use Case Driver SQLite Development, small deployments <code>gorm.io/driver/sqlite</code> MySQL Production, high traffic <code>gorm.io/driver/mysql</code>"},{"location":"architecture/overview/#ai-integration","title":"AI Integration","text":"Service Client Use Case Ollama Custom client Local LLM inference OpenAI Official SDK Cloud-based AI Templates Go templates Prompt engineering"},{"location":"architecture/overview/#security-architecture","title":"Security Architecture","text":""},{"location":"architecture/overview/#authentication-authorization","title":"Authentication &amp; Authorization","text":"<pre><code>graph LR\n    subgraph \"Authentication Flow\"\n        LOGIN[Login Request]\n        HASH[Password Hash Check]\n        JWT[JWT Token Generation]\n        COOKIE[Set HTTP Cookie]\n    end\n\n    subgraph \"Authorization Flow\"\n        REQUEST[Protected Request]\n        MIDDLEWARE[Auth Middleware]\n        VALIDATE[Token Validation]\n        USER[User Context]\n    end\n\n    LOGIN --&gt; HASH --&gt; JWT --&gt; COOKIE\n    REQUEST --&gt; MIDDLEWARE --&gt; VALIDATE --&gt; USER</code></pre>"},{"location":"architecture/overview/#security-measures","title":"Security Measures","text":"<ol> <li>Password Security:</li> <li>bcrypt hashing with salt</li> <li>Configurable cost factor</li> <li> <p>Password strength validation</p> </li> <li> <p>Token Security:</p> </li> <li>JWT with HS256 signing</li> <li>Configurable secret key</li> <li> <p>Token expiration</p> </li> <li> <p>Transport Security:</p> </li> <li>HTTPS in production</li> <li>CORS configuration</li> <li>Secure cookie flags</li> </ol>"},{"location":"architecture/overview/#data-protection","title":"Data Protection","text":"<ol> <li>Database Security:</li> <li>Connection encryption (MySQL SSL)</li> <li>File permissions (SQLite)</li> <li> <p>Prepared statements (SQL injection protection)</p> </li> <li> <p>Input Validation:</p> </li> <li>Request payload validation</li> <li>SQL injection prevention</li> <li>XSS protection through templating</li> </ol>"},{"location":"architecture/overview/#scalability-considerations","title":"Scalability Considerations","text":""},{"location":"architecture/overview/#horizontal-scaling","title":"Horizontal Scaling","text":"<p>The application is designed for horizontal scaling:</p> <ul> <li>Stateless Design: No server-side sessions</li> <li>Database Connection Pooling: Configurable pool sizes</li> <li>External AI Services: Offloaded computation</li> </ul>"},{"location":"architecture/overview/#performance-optimizations","title":"Performance Optimizations","text":"<ol> <li>Database Layer:</li> <li>Connection pooling</li> <li>Prepared statements</li> <li> <p>Efficient queries with proper indexing</p> </li> <li> <p>Application Layer:</p> </li> <li>Middleware caching</li> <li>Static file serving with proper headers</li> <li> <p>Gin's high-performance routing</p> </li> <li> <p>AI Services:</p> </li> <li>Template caching</li> <li>Response caching potential</li> <li>Async request processing</li> </ol>"},{"location":"architecture/overview/#monitoring-and-observability","title":"Monitoring and Observability","text":""},{"location":"architecture/overview/#logging","title":"Logging","text":"<pre><code>// Structured logging throughout the application\nlog.Printf(\"[AUTH] User %s logged in successfully\", username)\nlog.Printf(\"[GRID] Created %d items for user %d\", itemCount, userID)\nlog.Printf(\"[AI] Conjugation request processed in %v\", duration)\n</code></pre>"},{"location":"architecture/overview/#health-checks","title":"Health Checks","text":"<pre><code>// Health check endpoint\nGET /health\n{\n  \"status\": \"healthy\",\n  \"database\": \"connected\",\n  \"ai_service\": \"available\"\n}\n</code></pre>"},{"location":"architecture/overview/#metrics-collection","title":"Metrics Collection","text":"<p>Ready for integration with: - Prometheus metrics - Request timing - Error rate monitoring - Database connection metrics</p> <p>Next: Project Structure \u2192</p>"},{"location":"architecture/structure/","title":"Project Structure","text":"<p>This document provides a comprehensive overview of the Web App CAA project structure, following the Standard Go Project Layout principles.</p>"},{"location":"architecture/structure/#directory-layout","title":"Directory Layout","text":"<pre><code>web-app-CAA/\n\u251c\u2500\u2500 cmd/                    # Main applications\n\u2502   \u2514\u2500\u2500 web-app-caa/\n\u2502       \u2514\u2500\u2500 main.go        # Application entry point\n\u251c\u2500\u2500 internal/              # Private application code\n\u2502   \u251c\u2500\u2500 config/           # Configuration management\n\u2502   \u251c\u2500\u2500 database/         # Database layer\n\u2502   \u251c\u2500\u2500 handlers/         # HTTP request handlers\n\u2502   \u251c\u2500\u2500 middleware/       # Middleware components\n\u2502   \u251c\u2500\u2500 models/           # Data models\n\u2502   \u251c\u2500\u2500 prompts/          # AI prompt templates\n\u2502   \u2514\u2500\u2500 services/         # Business logic layer\n\u251c\u2500\u2500 pkg/                  # Public library code\n\u2502   \u2514\u2500\u2500 ollama/          # Ollama client library\n\u251c\u2500\u2500 web/                 # Web application assets\n\u2502   \u251c\u2500\u2500 static/          # Static files (CSS, JS, images)\n\u2502   \u2514\u2500\u2500 templates/       # HTML templates\n\u251c\u2500\u2500 deployments/         # Docker and deployment configs\n\u251c\u2500\u2500 docs/               # Documentation (MkDocs)\n\u251c\u2500\u2500 data/              # Application data (gitignored)\n\u251c\u2500\u2500 configs/           # Configuration files\n\u251c\u2500\u2500 bin/              # Compiled binaries\n\u251c\u2500\u2500 Makefile          # Build automation\n\u251c\u2500\u2500 go.mod           # Go module definition\n\u251c\u2500\u2500 go.sum           # Go module checksums\n\u251c\u2500\u2500 .env.example     # Environment variables template\n\u2514\u2500\u2500 README.md        # Project overview\n</code></pre>"},{"location":"architecture/structure/#core-directories","title":"Core Directories","text":""},{"location":"architecture/structure/#cmd-main-applications","title":"<code>/cmd</code> - Main Applications","text":"<p>The entry points for the application executables.</p> <pre><code>cmd/\n\u2514\u2500\u2500 web-app-caa/\n    \u2514\u2500\u2500 main.go           # Main application entry point\n</code></pre>"},{"location":"architecture/structure/#maingo","title":"<code>main.go</code>","text":"<pre><code>package main\n\nimport (\n    \"github.com/daniele/web-app-caa/internal/config\"\n    \"github.com/daniele/web-app-caa/internal/database\"\n    \"github.com/daniele/web-app-caa/internal/handlers\"\n    \"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n    // Configuration loading\n    cfg := config.Load()\n\n    // Database initialization\n    database.Initialize()\n\n    // Router setup with handlers\n    r := setupRouter()\n\n    // Start server\n    r.Run(cfg.Host + \":\" + cfg.Port)\n}\n</code></pre>"},{"location":"architecture/structure/#internal-private-application-code","title":"<code>/internal</code> - Private Application Code","text":"<p>Contains the core application logic that should not be imported by other applications.</p> <pre><code>internal/\n\u251c\u2500\u2500 config/\n\u2502   \u2514\u2500\u2500 config.go         # Configuration management\n\u251c\u2500\u2500 database/\n\u2502   \u2514\u2500\u2500 database.go       # Database connection and setup\n\u251c\u2500\u2500 handlers/\n\u2502   \u251c\u2500\u2500 auth.go          # Authentication handlers\n\u2502   \u251c\u2500\u2500 grid.go          # Grid management handlers\n\u2502   \u251c\u2500\u2500 ai.go            # AI service handlers\n\u2502   \u2514\u2500\u2500 pages.go         # Web page handlers\n\u251c\u2500\u2500 middleware/\n\u2502   \u251c\u2500\u2500 auth.go          # Authentication middleware\n\u2502   \u2514\u2500\u2500 ollama.go        # Ollama-specific middleware\n\u251c\u2500\u2500 models/\n\u2502   \u2514\u2500\u2500 models.go        # Data structures and models\n\u251c\u2500\u2500 prompts/\n\u2502   \u251c\u2500\u2500 presente.tmpl    # Present tense prompt template\n\u2502   \u251c\u2500\u2500 passato.tmpl     # Past tense prompt template\n\u2502   \u251c\u2500\u2500 futuro.tmpl      # Future tense prompt template\n\u2502   \u2514\u2500\u2500 correct_sentence.tmpl  # Sentence correction template\n\u2514\u2500\u2500 services/\n    \u251c\u2500\u2500 user.go          # User management service\n    \u251c\u2500\u2500 grid.go          # Grid management service\n    \u251c\u2500\u2500 grids.go         # Grid template service\n    \u251c\u2500\u2500 ai.go            # AI service coordination\n    \u2514\u2500\u2500 llm.go           # LLM service implementation\n</code></pre>"},{"location":"architecture/structure/#configuration-layer","title":"Configuration Layer","text":"<p><code>internal/config/config.go</code> <pre><code>type Config struct {\n    Port      string\n    Host      string\n    JWTSecret string\n    Database  DatabaseConfig\n    AI        AIConfig\n}\n\nfunc Load() *Config {\n    // Load from environment variables and .env file\n}\n</code></pre></p>"},{"location":"architecture/structure/#database-layer","title":"Database Layer","text":"<p><code>internal/database/database.go</code> <pre><code>func Initialize() {\n    // Database connection setup\n    // Auto-migration\n    // Connection pooling configuration\n}\n</code></pre></p>"},{"location":"architecture/structure/#handler-layer","title":"Handler Layer","text":"<p><code>internal/handlers/auth.go</code> <pre><code>type AuthHandlers struct {\n    userService *services.UserService\n}\n\nfunc (h *AuthHandlers) Login(c *gin.Context) {\n    // Handle user login\n}\n\nfunc (h *AuthHandlers) Register(c *gin.Context) {\n    // Handle user registration\n}\n</code></pre></p>"},{"location":"architecture/structure/#service-layer","title":"Service Layer","text":"<p><code>internal/services/user.go</code> <pre><code>type UserService struct {\n    db *gorm.DB\n}\n\nfunc (s *UserService) CreateUser(user *models.User) error {\n    // Business logic for user creation\n}\n</code></pre></p>"},{"location":"architecture/structure/#models-layer","title":"Models Layer","text":"<p><code>internal/models/models.go</code> <pre><code>type User struct {\n    ID       uint   `gorm:\"primaryKey\"`\n    Username string `gorm:\"unique;not null\"`\n    Password string `gorm:\"not null\"`\n    Status   string `gorm:\"default:pending_setup\"`\n}\n\ntype GridItem struct {\n    ID       uint   `gorm:\"primaryKey\"`\n    UserID   uint   `gorm:\"not null\"`\n    Type     string `gorm:\"not null\"`\n    Label    string\n    Icon     string\n    Color    string\n}\n</code></pre></p>"},{"location":"architecture/structure/#pkg-public-library-code","title":"<code>/pkg</code> - Public Library Code","text":"<p>Reusable code that can be imported by external applications.</p> <pre><code>pkg/\n\u2514\u2500\u2500 ollama/\n    \u2514\u2500\u2500 client.go         # Ollama API client library\n</code></pre>"},{"location":"architecture/structure/#ollama-client","title":"Ollama Client","text":"<p><code>pkg/ollama/client.go</code> <pre><code>type Client interface {\n    SimpleChat(model, prompt string) (string, error)\n    StreamChat(model, prompt string) (&lt;-chan string, error)\n}\n\ntype HTTPClient struct {\n    baseURL string\n    client  *http.Client\n}\n</code></pre></p>"},{"location":"architecture/structure/#web-web-application-assets","title":"<code>/web</code> - Web Application Assets","text":"<p>Static files and templates for the web interface.</p> <pre><code>web/\n\u251c\u2500\u2500 static/\n\u2502   \u251c\u2500\u2500 script/\n\u2502   \u2502   \u251c\u2500\u2500 auth.js       # Authentication JavaScript\n\u2502   \u2502   \u251c\u2500\u2500 checkAuth.js  # Auth verification\n\u2502   \u2502   \u251c\u2500\u2500 config.js     # Configuration utilities\n\u2502   \u2502   \u251c\u2500\u2500 script.js     # Main application logic\n\u2502   \u2502   \u2514\u2500\u2500 setup.js      # Setup wizard\n\u2502   \u2514\u2500\u2500 style/\n\u2502       \u251c\u2500\u2500 style.css     # Main stylesheet\n\u2502       \u2514\u2500\u2500 setup.css     # Setup page styles\n\u2514\u2500\u2500 templates/\n    \u251c\u2500\u2500 layout.tmpl       # Base layout template\n    \u251c\u2500\u2500 index.tmpl        # Main page template\n    \u251c\u2500\u2500 login.tmpl        # Login page template\n    \u251c\u2500\u2500 register.tmpl     # Registration page template\n    \u2514\u2500\u2500 setup.tmpl        # Setup wizard template\n</code></pre>"},{"location":"architecture/structure/#template-structure","title":"Template Structure","text":"<p><code>web/templates/layout.tmpl</code> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;{{.Title}} - Web App CAA&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"/static/style/style.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"container\"&gt;\n        {{template \"content\" .}}\n    &lt;/div&gt;\n    &lt;script src=\"/static/script/script.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p>"},{"location":"architecture/structure/#build-and-deployment","title":"Build and Deployment","text":""},{"location":"architecture/structure/#deployments-deployment-configuration","title":"<code>/deployments</code> - Deployment Configuration","text":"<pre><code>deployments/\n\u251c\u2500\u2500 docker-compose.yml          # Development compose file\n\u251c\u2500\u2500 docker-compose.override.yml # Local overrides\n\u2514\u2500\u2500 Dockerfile                  # Container build definition\n</code></pre>"},{"location":"architecture/structure/#dockerfile","title":"Dockerfile","text":"<pre><code>FROM golang:1.21-alpine AS builder\n\nWORKDIR /app\nCOPY go.mod go.sum ./\nRUN go mod download\n\nCOPY . .\nRUN go build -o main ./cmd/web-app-caa\n\nFROM alpine:latest\nRUN apk --no-cache add ca-certificates\nWORKDIR /root/\nCOPY --from=builder /app/main .\nCOPY --from=builder /app/web ./web\nCOPY --from=builder /app/internal/prompts ./internal/prompts\n\nCMD [\"./main\"]\n</code></pre>"},{"location":"architecture/structure/#docker-compose","title":"Docker Compose","text":"<pre><code>version: '3.8'\n\nservices:\n  webapp:\n    build: .\n    ports:\n      - \"3000:3000\"\n    environment:\n      - APP_PORT=3000\n      - APP_HOST=0.0.0.0\n    volumes:\n      - ./data:/app/data\n    depends_on:\n      - ollama\n\n  ollama:\n    image: ollama/ollama:latest\n    ports:\n      - \"11434:11434\"\n    volumes:\n      - ollama_models:/root/.ollama\n\nvolumes:\n  ollama_models:\n</code></pre>"},{"location":"architecture/structure/#makefile-build-automation","title":"<code>Makefile</code> - Build Automation","text":"<pre><code>.PHONY: build run test clean docker-build docker-up\n\nBINARY_NAME=web-app-caa\nBINARY_PATH=./bin/$(BINARY_NAME)\n\nbuild:\n    go build -o $(BINARY_PATH) ./cmd/web-app-caa\n\nrun: build\n    $(BINARY_PATH)\n\ndev:\n    go run ./cmd/web-app-caa/main.go\n\ntest:\n    go test -v ./...\n\ndocker-build:\n    docker build -t $(BINARY_NAME) .\n\ndocker-up:\n    docker-compose up --build\n\nclean:\n    go clean\n    rm -f $(BINARY_PATH)\n</code></pre>"},{"location":"architecture/structure/#configuration-files","title":"Configuration Files","text":""},{"location":"architecture/structure/#go-module-files","title":"Go Module Files","text":"<p><code>go.mod</code> <pre><code>module github.com/daniele/web-app-caa\n\ngo 1.21\n\nrequire (\n    github.com/gin-gonic/gin v1.10.1\n    github.com/golang-jwt/jwt/v5 v5.3.0\n    gorm.io/gorm v1.30.1\n    gorm.io/driver/sqlite v1.6.0\n    // ... other dependencies\n)\n</code></pre></p>"},{"location":"architecture/structure/#environment-configuration","title":"Environment Configuration","text":"<p><code>.env.example</code> <pre><code># Server Configuration\nAPP_PORT=3000\nAPP_HOST=localhost\nJWT_SECRET=your-jwt-secret-key\n\n# Database Configuration  \nDB_DRIVER=sqlite\nDB_SQLITE_DIR=./data\nDB_SQLITE_FILE=database.sqlite\n\n# AI Configuration\nBACKEND_TYPE=ollama\nLLM_HOST=http://localhost:11434\nLLM_MODEL=llama2\n</code></pre></p>"},{"location":"architecture/structure/#data-directory","title":"Data Directory","text":"<pre><code>data/                    # Runtime data (gitignored)\n\u251c\u2500\u2500 database.sqlite      # SQLite database file\n\u251c\u2500\u2500 database.sqlite-shm  # Shared memory file\n\u2514\u2500\u2500 database.sqlite-wal  # Write-ahead log file\n</code></pre>"},{"location":"architecture/structure/#documentation","title":"Documentation","text":"<pre><code>docs/                    # MkDocs documentation\n\u251c\u2500\u2500 mkdocs.yml          # MkDocs configuration\n\u251c\u2500\u2500 index.md            # Documentation homepage\n\u251c\u2500\u2500 getting-started/    # Getting started guides\n\u251c\u2500\u2500 architecture/       # Architecture documentation\n\u251c\u2500\u2500 api/               # API reference\n\u251c\u2500\u2500 deployment/        # Deployment guides\n\u2514\u2500\u2500 development/       # Development guides\n</code></pre>"},{"location":"architecture/structure/#file-naming-conventions","title":"File Naming Conventions","text":""},{"location":"architecture/structure/#go-files","title":"Go Files","text":"<ul> <li>Package names: lowercase, single word</li> <li>File names: lowercase with underscores (<code>user_service.go</code>)</li> <li>Test files: suffix with <code>_test.go</code></li> <li>Interface files: often suffixed with <code>_interface.go</code></li> </ul>"},{"location":"architecture/structure/#template-files","title":"Template Files","text":"<ul> <li>Extension: <code>.tmpl</code> for Go templates</li> <li>Naming: descriptive, lowercase (<code>login.tmpl</code>, <code>user_profile.tmpl</code>)</li> </ul>"},{"location":"architecture/structure/#static-files","title":"Static Files","text":"<ul> <li>JavaScript: <code>.js</code> extension, camelCase naming</li> <li>CSS: <code>.css</code> extension, kebab-case naming</li> <li>Images: descriptive names with appropriate extensions</li> </ul>"},{"location":"architecture/structure/#import-organization","title":"Import Organization","text":"<p>Go files follow this import organization:</p> <pre><code>package handlers\n\nimport (\n    // Standard library imports\n    \"fmt\"\n    \"net/http\"\n\n    // Third-party imports\n    \"github.com/gin-gonic/gin\"\n    \"gorm.io/gorm\"\n\n    // Local imports\n    \"github.com/daniele/web-app-caa/internal/models\"\n    \"github.com/daniele/web-app-caa/internal/services\"\n)\n</code></pre>"},{"location":"architecture/structure/#code-organization-principles","title":"Code Organization Principles","text":""},{"location":"architecture/structure/#1-separation-of-concerns","title":"1. Separation of Concerns","text":"<p>Each package has a single, well-defined responsibility.</p>"},{"location":"architecture/structure/#2-dependency-direction","title":"2. Dependency Direction","text":"<p>Dependencies flow inward: handlers \u2192 services \u2192 models.</p>"},{"location":"architecture/structure/#3-interface-usage","title":"3. Interface Usage","text":"<p>Services depend on interfaces, not concrete implementations.</p>"},{"location":"architecture/structure/#4-error-handling","title":"4. Error Handling","text":"<p>Consistent error handling patterns throughout the codebase.</p>"},{"location":"architecture/structure/#5-testing-structure","title":"5. Testing Structure","text":"<p>Tests are co-located with the code they test (<code>*_test.go</code> files).</p> <p>Next: Database Schema \u2192</p>"},{"location":"deployment/docker/","title":"Docker Deployment","text":"<p>This guide covers deploying Web App CAA using Docker and Docker Compose for both development and production environments.</p>"},{"location":"deployment/docker/#quick-start-with-docker-compose","title":"Quick Start with Docker Compose","text":"<p>The fastest way to get Web App CAA running is using Docker Compose:</p> <pre><code># Clone the repository\ngit clone https://github.com/dnviti/web-app-CAA.git\ncd web-app-CAA\n\n# Start all services\ndocker-compose up --build\n\n# Or using Make\nmake docker-up\n</code></pre> <p>Access the application at <code>http://localhost:3000</code></p>"},{"location":"deployment/docker/#docker-compose-configuration","title":"Docker Compose Configuration","text":""},{"location":"deployment/docker/#development-setup","title":"Development Setup","text":"<p><code>docker-compose.yml</code></p> <pre><code>version: '3.8'\n\nservices:\n  webapp:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    ports:\n      - \"3000:3000\"\n    environment:\n      - APP_PORT=3000\n      - APP_HOST=0.0.0.0\n      - JWT_SECRET=development-jwt-secret-key\n      - DB_DRIVER=sqlite\n      - DB_SQLITE_DIR=/app/data\n      - DB_SQLITE_FILE=database.sqlite\n      - BACKEND_TYPE=ollama\n      - LLM_HOST=http://ollama:11434\n      - LLM_MODEL=llama2\n    volumes:\n      - webapp_data:/app/data\n      - ./rag_knowledge.json:/app/rag_knowledge.json\n    depends_on:\n      - ollama\n    restart: unless-stopped\n\n  ollama:\n    image: ollama/ollama:latest\n    ports:\n      - \"11434:11434\"\n    volumes:\n      - ollama_models:/root/.ollama\n    environment:\n      - OLLAMA_ORIGINS=*\n    restart: unless-stopped\n\nvolumes:\n  webapp_data:\n    driver: local\n  ollama_models:\n    driver: local\n</code></pre>"},{"location":"deployment/docker/#production-setup","title":"Production Setup","text":"<p><code>docker-compose.prod.yml</code></p> <pre><code>version: '3.8'\n\nservices:\n  webapp:\n    image: ghcr.io/dnviti/web-app-caa:latest\n    ports:\n      - \"80:3000\"\n    environment:\n      - APP_PORT=3000\n      - APP_HOST=0.0.0.0\n      - JWT_SECRET=${JWT_SECRET}\n      - DB_DRIVER=mysql\n      - DB_HOST=mysql\n      - DB_PORT=3306\n      - DB_USER=${DB_USER}\n      - DB_PASSWORD=${DB_PASSWORD}\n      - DB_NAME=${DB_NAME}\n      - BACKEND_TYPE=openai\n      - OPENAI_API_KEY=${OPENAI_API_KEY}\n      - LLM_MODEL=gpt-3.5-turbo\n    volumes:\n      - webapp_data:/app/data\n      - ./rag_knowledge.json:/app/rag_knowledge.json\n    depends_on:\n      mysql:\n        condition: service_healthy\n    restart: unless-stopped\n\n  mysql:\n    image: mysql:8.0\n    environment:\n      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}\n      - MYSQL_DATABASE=${DB_NAME}\n      - MYSQL_USER=${DB_USER}\n      - MYSQL_PASSWORD=${DB_PASSWORD}\n    volumes:\n      - mysql_data:/var/lib/mysql\n    ports:\n      - \"3306:3306\"\n    healthcheck:\n      test: [\"CMD\", \"mysqladmin\", \"ping\", \"-h\", \"localhost\"]\n      timeout: 20s\n      retries: 10\n    restart: unless-stopped\n\n  nginx:\n    image: nginx:alpine\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./nginx.conf:/etc/nginx/nginx.conf\n      - ./ssl:/etc/nginx/ssl\n    depends_on:\n      - webapp\n    restart: unless-stopped\n\nvolumes:\n  webapp_data:\n  mysql_data:\n  ollama_models:\n</code></pre>"},{"location":"deployment/docker/#dockerfile","title":"Dockerfile","text":"<p>The application uses a multi-stage Docker build:</p> <pre><code># Build stage\nFROM golang:1.21-alpine AS builder\n\n# Install build dependencies\nRUN apk add --no-cache git ca-certificates tzdata\n\n# Set working directory\nWORKDIR /app\n\n# Copy go mod files\nCOPY go.mod go.sum ./\n\n# Download dependencies\nRUN go mod download\nRUN go mod verify\n\n# Copy source code\nCOPY . .\n\n# Build the application\nRUN CGO_ENABLED=1 GOOS=linux go build \\\n    -ldflags='-w -s -extldflags \"-static\"' \\\n    -a -installsuffix cgo \\\n    -o main ./cmd/web-app-caa\n\n# Final stage\nFROM alpine:latest\n\n# Install runtime dependencies\nRUN apk --no-cache add \\\n    ca-certificates \\\n    tzdata \\\n    sqlite\n\n# Create non-root user\nRUN addgroup -g 1001 appgroup &amp;&amp; \\\n    adduser -u 1001 -G appgroup -s /bin/sh -D appuser\n\n# Set working directory\nWORKDIR /app\n\n# Copy binary from builder\nCOPY --from=builder /app/main .\n\n# Copy required files\nCOPY --from=builder /app/web ./web\nCOPY --from=builder /app/internal/prompts ./internal/prompts\nCOPY --from=builder /app/rag_knowledge.json ./\n\n# Create data directory\nRUN mkdir -p data &amp;&amp; chown -R appuser:appgroup /app\n\n# Switch to non-root user\nUSER appuser\n\n# Expose port\nEXPOSE 3000\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\\n    CMD wget --no-verbose --tries=1 --spider http://localhost:3000/health || exit 1\n\n# Start the application\nCMD [\"./main\"]\n</code></pre>"},{"location":"deployment/docker/#environment-configuration","title":"Environment Configuration","text":""},{"location":"deployment/docker/#development-environment","title":"Development Environment","text":"<p>Create a <code>.env</code> file for development:</p> <pre><code># Server Configuration\nAPP_PORT=3000\nAPP_HOST=0.0.0.0\nJWT_SECRET=development-jwt-secret-change-in-production\n\n# Database (SQLite for development)\nDB_DRIVER=sqlite\nDB_SQLITE_DIR=/app/data\nDB_SQLITE_FILE=database.sqlite\n\n# AI Configuration (Ollama)\nBACKEND_TYPE=ollama\nLLM_HOST=http://ollama:11434\nLLM_MODEL=llama2\n\n# Optional: Enable debug mode\nGIN_MODE=debug\n</code></pre>"},{"location":"deployment/docker/#production-environment","title":"Production Environment","text":"<p>Create a <code>.env.prod</code> file for production:</p> <pre><code># Server Configuration\nAPP_PORT=3000\nAPP_HOST=0.0.0.0\nJWT_SECRET=your-super-secure-production-jwt-secret\n\n# Database (MySQL for production)\nDB_DRIVER=mysql\nDB_HOST=mysql\nDB_PORT=3306\nDB_USER=webapp_user\nDB_PASSWORD=secure-database-password\nDB_NAME=webapp_caa_prod\nDB_MAX_OPEN_CONNS=50\nDB_MAX_IDLE_CONNS=10\n\n# AI Configuration (OpenAI)\nBACKEND_TYPE=openai\nOPENAI_API_KEY=sk-your-openai-api-key\nLLM_MODEL=gpt-3.5-turbo\n\n# MySQL Configuration\nMYSQL_ROOT_PASSWORD=super-secure-root-password\n</code></pre>"},{"location":"deployment/docker/#deployment-commands","title":"Deployment Commands","text":""},{"location":"deployment/docker/#development-deployment","title":"Development Deployment","text":"<pre><code># Start development environment\ndocker-compose up --build\n\n# Start in background\ndocker-compose up -d --build\n\n# View logs\ndocker-compose logs -f webapp\n\n# Stop services\ndocker-compose down\n\n# Clean up (remove volumes)\ndocker-compose down -v\n</code></pre>"},{"location":"deployment/docker/#production-deployment","title":"Production Deployment","text":"<pre><code># Use production compose file\ndocker-compose -f docker-compose.prod.yml up -d\n\n# Or with environment file\ndocker-compose --env-file .env.prod -f docker-compose.prod.yml up -d\n\n# Update to latest version\ndocker-compose -f docker-compose.prod.yml pull\ndocker-compose -f docker-compose.prod.yml up -d\n\n# View production logs\ndocker-compose -f docker-compose.prod.yml logs -f webapp\n</code></pre>"},{"location":"deployment/docker/#service-management","title":"Service Management","text":""},{"location":"deployment/docker/#container-operations","title":"Container Operations","text":"<pre><code># Check running containers\ndocker-compose ps\n\n# Execute commands in container\ndocker-compose exec webapp /bin/sh\n\n# View container logs\ndocker-compose logs webapp\ndocker-compose logs ollama\n\n# Restart specific service\ndocker-compose restart webapp\n\n# Scale services (if needed)\ndocker-compose up -d --scale webapp=2\n</code></pre>"},{"location":"deployment/docker/#database-operations","title":"Database Operations","text":""},{"location":"deployment/docker/#sqlite-development","title":"SQLite (Development)","text":"<pre><code># Access SQLite database\ndocker-compose exec webapp sqlite3 /app/data/database.sqlite\n\n# Backup database\ndocker-compose exec webapp cp /app/data/database.sqlite /app/data/backup.sqlite\n\n# Copy database from container\ndocker cp $(docker-compose ps -q webapp):/app/data/database.sqlite ./database.sqlite\n</code></pre>"},{"location":"deployment/docker/#mysql-production","title":"MySQL (Production)","text":"<pre><code># Access MySQL database\ndocker-compose exec mysql mysql -u webapp_user -p webapp_caa_prod\n\n# Create database backup\ndocker-compose exec mysql mysqldump -u webapp_user -p webapp_caa_prod &gt; backup.sql\n\n# Restore database\ndocker-compose exec -T mysql mysql -u webapp_user -p webapp_caa_prod &lt; backup.sql\n</code></pre>"},{"location":"deployment/docker/#health-monitoring","title":"Health Monitoring","text":""},{"location":"deployment/docker/#health-check-endpoints","title":"Health Check Endpoints","text":"<p>The application includes health check endpoints:</p> <pre><code># Basic health check\ncurl http://localhost:3000/health\n\n# Detailed health status\ncurl http://localhost:3000/api/health\n</code></pre> <p>Response: <pre><code>{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2025-01-15T10:00:00Z\",\n  \"version\": \"1.0.0\",\n  \"database\": \"connected\",\n  \"ai_service\": \"available\"\n}\n</code></pre></p>"},{"location":"deployment/docker/#container-health-checks","title":"Container Health Checks","text":"<p>Monitor container health:</p> <pre><code># Check container health\ndocker-compose ps\n\n# View health check logs\ndocker inspect $(docker-compose ps -q webapp) | grep Health -A 10\n</code></pre>"},{"location":"deployment/docker/#volume-management","title":"Volume Management","text":""},{"location":"deployment/docker/#data-persistence","title":"Data Persistence","text":"<pre><code># List Docker volumes\ndocker volume ls\n\n# Inspect volume\ndocker volume inspect web-app-caa_webapp_data\n\n# Backup volume\ndocker run --rm -v web-app-caa_webapp_data:/data -v $(pwd):/backup alpine tar czf /backup/webapp_data.tar.gz -C /data .\n\n# Restore volume\ndocker run --rm -v web-app-caa_webapp_data:/data -v $(pwd):/backup alpine sh -c \"cd /data &amp;&amp; tar xzf /backup/webapp_data.tar.gz\"\n</code></pre>"},{"location":"deployment/docker/#cleanup","title":"Cleanup","text":"<pre><code># Remove unused containers and images\ndocker system prune\n\n# Remove specific volumes\ndocker volume rm web-app-caa_webapp_data\n\n# Complete cleanup\ndocker-compose down -v --remove-orphans\ndocker system prune -a\n</code></pre>"},{"location":"deployment/docker/#performance-optimization","title":"Performance Optimization","text":""},{"location":"deployment/docker/#resource-limits","title":"Resource Limits","text":"<p><code>docker-compose.override.yml</code> for resource constraints:</p> <pre><code>version: '3.8'\n\nservices:\n  webapp:\n    deploy:\n      resources:\n        limits:\n          memory: 512M\n          cpus: '0.5'\n        reservations:\n          memory: 256M\n          cpus: '0.25'\n\n  mysql:\n    deploy:\n      resources:\n        limits:\n          memory: 1G\n          cpus: '1.0'\n        reservations:\n          memory: 512M\n          cpus: '0.5'\n\n  ollama:\n    deploy:\n      resources:\n        limits:\n          memory: 4G\n          cpus: '2.0'\n</code></pre>"},{"location":"deployment/docker/#docker-build-optimization","title":"Docker Build Optimization","text":"<pre><code># Use build cache\nRUN --mount=type=cache,target=/go/pkg/mod \\\n    --mount=type=cache,target=/root/.cache/go-build \\\n    go mod download\n\n# Multi-stage optimization\nCOPY go.mod go.sum ./\nRUN go mod download\nCOPY . .\nRUN go build ...\n</code></pre>"},{"location":"deployment/docker/#security-considerations","title":"Security Considerations","text":""},{"location":"deployment/docker/#container-security","title":"Container Security","text":"<pre><code># Run as non-root user\nRUN addgroup -g 1001 appgroup &amp;&amp; \\\n    adduser -u 1001 -G appgroup -s /bin/sh -D appuser\nUSER appuser\n\n# Read-only root filesystem\ndocker run --read-only --tmpfs /tmp web-app-caa\n\n# Drop capabilities\ndocker run --cap-drop=ALL --cap-add=NET_BIND_SERVICE web-app-caa\n</code></pre>"},{"location":"deployment/docker/#network-security","title":"Network Security","text":"<pre><code># Custom network\nnetworks:\n  webapp_network:\n    driver: bridge\n    ipam:\n      config:\n        - subnet: 172.20.0.0/16\n\nservices:\n  webapp:\n    networks:\n      - webapp_network\n</code></pre>"},{"location":"deployment/docker/#secrets-management","title":"Secrets Management","text":"<pre><code># Using Docker secrets\nsecrets:\n  jwt_secret:\n    file: ./secrets/jwt_secret.txt\n  db_password:\n    file: ./secrets/db_password.txt\n\nservices:\n  webapp:\n    secrets:\n      - jwt_secret\n      - db_password\n    environment:\n      - JWT_SECRET_FILE=/run/secrets/jwt_secret\n      - DB_PASSWORD_FILE=/run/secrets/db_password\n</code></pre>"},{"location":"deployment/docker/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment/docker/#common-issues","title":"Common Issues","text":"<p>Container won't start: <pre><code># Check logs\ndocker-compose logs webapp\n\n# Check container status\ndocker-compose ps\n\n# Inspect container\ndocker inspect $(docker-compose ps -q webapp)\n</code></pre></p> <p>Database connection issues: <pre><code># Test database connection\ndocker-compose exec webapp ping mysql\n\n# Check database logs\ndocker-compose logs mysql\n\n# Verify database is ready\ndocker-compose exec mysql mysqladmin ping\n</code></pre></p> <p>Port conflicts: <pre><code># Check port usage\nnetstat -tulpn | grep :3000\n\n# Use different ports\ndocker-compose up --build -p 8080:3000\n</code></pre></p> <p>Volume permission issues: <pre><code># Fix permissions\ndocker-compose exec webapp chown -R appuser:appgroup /app/data\n</code></pre></p>"},{"location":"deployment/docker/#debug-mode","title":"Debug Mode","text":"<p>Enable debug logging:</p> <pre><code>services:\n  webapp:\n    environment:\n      - GIN_MODE=debug\n      - LOG_LEVEL=debug\n</code></pre> <p>Next: Production Deployment \u2192</p>"},{"location":"deployment/github-pages/","title":"GitHub Pages Deployment","text":"<p>This guide covers deploying the MkDocs documentation to GitHub Pages, making your Web App CAA documentation publicly available.</p>"},{"location":"deployment/github-pages/#overview","title":"Overview","text":"<p>GitHub Pages provides free hosting for static websites generated from your repository. This documentation site can be automatically built and deployed using GitHub Actions.</p>"},{"location":"deployment/github-pages/#setup-github-pages","title":"Setup GitHub Pages","text":""},{"location":"deployment/github-pages/#1-enable-github-pages","title":"1. Enable GitHub Pages","text":"<ol> <li>Go to your repository settings on GitHub</li> <li>Scroll down to \"Pages\" section</li> <li>Under \"Source\", select \"GitHub Actions\"</li> <li>This enables GitHub Pages with custom workflows</li> </ol>"},{"location":"deployment/github-pages/#2-repository-structure","title":"2. Repository Structure","text":"<p>Ensure your repository has the documentation structure:</p> <pre><code>web-app-CAA/\n\u251c\u2500\u2500 docs/                    # Documentation source\n\u2502   \u251c\u2500\u2500 mkdocs.yml          # MkDocs configuration\n\u2502   \u251c\u2500\u2500 index.md            # Homepage\n\u2502   \u251c\u2500\u2500 getting-started/    # Getting started guides\n\u2502   \u251c\u2500\u2500 architecture/       # Architecture docs\n\u2502   \u251c\u2500\u2500 api/               # API reference\n\u2502   \u251c\u2500\u2500 deployment/        # Deployment guides\n\u2502   \u2514\u2500\u2500 development/       # Development guides\n\u251c\u2500\u2500 .github/\n\u2502   \u2514\u2500\u2500 workflows/\n\u2502       \u2514\u2500\u2500 docs.yml       # GitHub Actions workflow\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"deployment/github-pages/#github-actions-workflow","title":"GitHub Actions Workflow","text":"<p>Create the workflow file <code>.github/workflows/docs.yml</code>:</p> <pre><code>name: Deploy Documentation\n\non:\n  # Trigger on push to main/master branch\n  push:\n    branches: [main, master]\n    paths:\n      - 'docs/**'\n      - '.github/workflows/docs.yml'\n\n  # Allow manual trigger\n  workflow_dispatch:\n\n# Set permissions for GitHub Pages deployment\npermissions:\n  contents: read\n  pages: write\n  id-token: write\n\n# Ensure only one deployment runs at a time\nconcurrency:\n  group: \"pages\"\n  cancel-in-progress: false\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          # Fetch full history for git-revision-date-localized plugin\n          fetch-depth: 0\n\n      - name: Setup Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.11'\n          cache: 'pip'\n\n      - name: Install dependencies\n        run: |\n          pip install -r docs/requirements.txt\n\n      - name: Build documentation\n        run: |\n          cd docs\n          mkdocs build --strict\n\n      - name: Setup Pages\n        uses: actions/configure-pages@v3\n\n      - name: Upload artifact\n        uses: actions/upload-pages-artifact@v2\n        with:\n          path: ./docs/site\n\n  deploy:\n    environment:\n      name: github-pages\n      url: ${{ steps.deployment.outputs.page_url }}\n    runs-on: ubuntu-latest\n    needs: build\n\n    steps:\n      - name: Deploy to GitHub Pages\n        id: deployment\n        uses: actions/deploy-pages@v2\n</code></pre>"},{"location":"deployment/github-pages/#python-dependencies","title":"Python Dependencies","text":"<p>Create <code>docs/requirements.txt</code> with the required packages:</p> <pre><code>mkdocs&gt;=1.5.0\nmkdocs-material&gt;=9.0.0\nmkdocs-git-revision-date-localized-plugin&gt;=1.2.0\npymdown-extensions&gt;=10.0.0\n</code></pre>"},{"location":"deployment/github-pages/#mkdocs-configuration","title":"MkDocs Configuration","text":"<p>Update <code>docs/mkdocs.yml</code> with GitHub Pages specific settings:</p> <pre><code>site_name: Web App CAA Documentation\nsite_description: Documentation for Web App CAA - Comunicazione Aumentativa e Alternativa\nsite_author: Daniele\nsite_url: https://dnviti.github.io/web-app-CAA\n\nrepo_name: dnviti/web-app-CAA\nrepo_url: https://github.com/dnviti/web-app-CAA\n\n# GitHub Pages deployment\nuse_directory_urls: true\n\ntheme:\n  name: material\n  features:\n    - navigation.tabs\n    - navigation.sections\n    - navigation.expand\n    - navigation.top\n    - search.suggest\n    - search.highlight\n    - search.share\n    - content.code.copy\n    - content.code.annotate\n  palette:\n    # Palette toggle for light mode\n    - scheme: default\n      primary: blue\n      accent: blue\n      toggle:\n        icon: material/brightness-7\n        name: Switch to dark mode\n    # Palette toggle for dark mode\n    - scheme: slate\n      primary: blue\n      accent: blue\n      toggle:\n        icon: material/brightness-4\n        name: Switch to light mode\n\nmarkdown_extensions:\n  - toc:\n      permalink: true\n  - admonition\n  - pymdownx.details\n  - pymdownx.superfences:\n      custom_fences:\n        - name: mermaid\n          class: mermaid\n          format: !!python/name:pymdownx.superfences.fence_code_format\n  - pymdownx.highlight:\n      anchor_linenums: true\n      line_spans: __span\n      pygments_lang_class: true\n  - pymdownx.inlinehilite\n  - pymdownx.snippets\n  - pymdownx.tabbed:\n      alternate_style: true\n  - pymdownx.emoji:\n      emoji_index: !!python/name:materialx.emoji.twemoji\n      emoji_generator: !!python/name:materialx.emoji.to_svg\n\nplugins:\n  - search:\n      lang: en\n  - git-revision-date-localized:\n      type: date\n      enable_creation_date: true\n\nnav:\n  - Home: index.md\n  - Getting Started:\n    - Quick Start: getting-started/quick-start.md\n    - Installation: getting-started/installation.md\n    - Configuration: getting-started/configuration.md\n  - Architecture:\n    - Overview: architecture/overview.md\n    - Project Structure: architecture/structure.md\n    - Database Schema: architecture/database.md\n  - API Reference:\n    - Authentication: api/authentication.md\n    - Grid Management: api/grid.md\n    - AI Services: api/ai.md\n  - Deployment:\n    - Docker: deployment/docker.md\n    - Production: deployment/production.md\n    - GitHub Pages: deployment/github-pages.md\n  - Development:\n    - Setup: development/setup.md\n    - Testing: development/testing.md\n    - Contributing: development/contributing.md\n\ncopyright: Copyright &amp;copy; 2025 Daniele\n\nextra:\n  social:\n    - icon: fontawesome/brands/github\n      link: https://github.com/dnviti/web-app-CAA\n  version:\n    provider: mike\n</code></pre>"},{"location":"deployment/github-pages/#deployment-process","title":"Deployment Process","text":""},{"location":"deployment/github-pages/#automatic-deployment","title":"Automatic Deployment","text":"<p>Once the workflow is set up, documentation will be automatically deployed when:</p> <ol> <li>Push to main/master: Changes to <code>docs/</code> directory trigger deployment</li> <li>Manual trigger: Use GitHub Actions \"Run workflow\" button</li> </ol>"},{"location":"deployment/github-pages/#manual-deployment","title":"Manual Deployment","text":"<p>You can also deploy manually from your local machine:</p> <pre><code># Install MkDocs and dependencies\npip install -r docs/requirements.txt\n\n# Build and deploy to GitHub Pages\ncd docs\nmkdocs gh-deploy --force\n</code></pre>"},{"location":"deployment/github-pages/#verification","title":"Verification","text":""},{"location":"deployment/github-pages/#check-deployment-status","title":"Check Deployment Status","text":"<ol> <li>Go to Actions tab in your GitHub repository</li> <li>Check the \"Deploy Documentation\" workflow</li> <li>Ensure both build and deploy jobs completed successfully</li> </ol>"},{"location":"deployment/github-pages/#access-documentation","title":"Access Documentation","text":"<p>Your documentation will be available at:</p> <pre><code>https://dnviti.github.io/web-app-CAA\n</code></pre> <p>Replace <code>dnviti</code> with your GitHub username.</p>"},{"location":"deployment/github-pages/#test-locally","title":"Test Locally","text":"<p>Before deploying, test the documentation locally:</p> <pre><code>cd docs\n\n# Install dependencies\npip install -r requirements.txt\n\n# Serve locally\nmkdocs serve\n\n# Access at http://localhost:8000\n</code></pre>"},{"location":"deployment/github-pages/#custom-domain-optional","title":"Custom Domain (Optional)","text":""},{"location":"deployment/github-pages/#setup-custom-domain","title":"Setup Custom Domain","text":"<ol> <li> <p>Add CNAME file: Create <code>docs/CNAME</code> with your domain:    <pre><code>docs.example.com\n</code></pre></p> </li> <li> <p>Update DNS: Add CNAME record pointing to <code>username.github.io</code></p> </li> <li> <p>Update MkDocs config:    <pre><code>site_url: https://docs.example.com\n</code></pre></p> </li> <li> <p>GitHub Settings:</p> </li> <li>Go to repository Settings &gt; Pages</li> <li>Enter your custom domain</li> <li>Enable \"Enforce HTTPS\"</li> </ol>"},{"location":"deployment/github-pages/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"deployment/github-pages/#version-management","title":"Version Management","text":"<p>Use mike for documentation versioning:</p> <pre><code># Install mike\npip install mike\n\n# Deploy version\nmike deploy --push --update-aliases 1.0 latest\n\n# Set default version\nmike set-default --push latest\n\n# List versions\nmike list\n</code></pre>"},{"location":"deployment/github-pages/#search-enhancement","title":"Search Enhancement","text":"<p>Enable advanced search with mkdocs-material:</p> <pre><code>plugins:\n  - search:\n      lang: en\n      separator: '[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&amp;[lg]t;|(?!\\b)(?=[A-Z][a-z])'\n</code></pre>"},{"location":"deployment/github-pages/#social-cards","title":"Social Cards","text":"<p>Generate social media cards:</p> <pre><code>plugins:\n  - social:\n      cards_layout_options:\n        background_color: \"#1976d2\"\n        color: \"#ffffff\"\n</code></pre>"},{"location":"deployment/github-pages/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment/github-pages/#common-issues","title":"Common Issues","text":"<p>Build Failures:</p> <pre><code># Check Python version\npython --version\n\n# Install exact dependency versions\npip install -r requirements.txt\n\n# Test build locally\nmkdocs build --strict\n</code></pre> <p>Permission Errors:</p> <p>Ensure GitHub Actions has correct permissions in repository settings: - Settings &gt; Actions &gt; General &gt; Workflow permissions - Select \"Read and write permissions\"</p> <p>404 Errors:</p> <ol> <li>Check site_url in mkdocs.yml</li> <li>Ensure use_directory_urls: true</li> <li>Verify GitHub Pages source is set to \"GitHub Actions\"</li> </ol> <p>Styling Issues:</p> <pre><code># Fix Material theme issues\ntheme:\n  name: material\n  palette:\n    scheme: default\n    primary: blue\n</code></pre>"},{"location":"deployment/github-pages/#debug-mode","title":"Debug Mode","text":"<p>Enable debug output:</p> <pre><code># In workflow\n- name: Build documentation\n  run: |\n    cd docs\n    mkdocs build --strict --verbose\n</code></pre>"},{"location":"deployment/github-pages/#maintenance","title":"Maintenance","text":""},{"location":"deployment/github-pages/#regular-updates","title":"Regular Updates","text":"<pre><code># Update dependencies\npip list --outdated\npip install --upgrade mkdocs mkdocs-material\n\n# Update requirements.txt\npip freeze &gt; docs/requirements.txt\n</code></pre>"},{"location":"deployment/github-pages/#content-updates","title":"Content Updates","text":"<ol> <li>Edit documentation files in <code>docs/</code> directory</li> <li>Test locally with <code>mkdocs serve</code></li> <li>Commit and push to trigger automatic deployment</li> <li>Verify deployment at your GitHub Pages URL</li> </ol>"},{"location":"deployment/github-pages/#monitoring","title":"Monitoring","text":"<ul> <li>GitHub Actions: Monitor workflow runs</li> <li>GitHub Pages: Check deployment status</li> <li>Analytics: Consider adding Google Analytics for usage metrics</li> </ul> <p>Your documentation is now automatically deployed to GitHub Pages! Every time you update the documentation and push to the main branch, it will be automatically rebuilt and deployed.</p> <p>The documentation will be available at: <code>https://dnviti.github.io/web-app-CAA</code></p>"},{"location":"development/contributing/","title":"Contributing to Web App CAA","text":"<p>Thank you for your interest in contributing to Web App CAA! This guide will help you get started with contributing to the project.</p>"},{"location":"development/contributing/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Code of Conduct</li> <li>Getting Started</li> <li>Development Workflow</li> <li>Coding Standards</li> <li>Testing Guidelines</li> <li>Documentation</li> <li>Pull Request Process</li> <li>Issue Reporting</li> <li>Architecture Decisions</li> </ol>"},{"location":"development/contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>This project adheres to a code of conduct adapted from the Contributor Covenant. By participating, you are expected to uphold this code.</p>"},{"location":"development/contributing/#our-pledge","title":"Our Pledge","text":"<p>We pledge to make participation in our project a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"development/contributing/#standards","title":"Standards","text":"<p>Examples of behavior that contributes to creating a positive environment: - Being respectful of differing viewpoints and experiences - Gracefully accepting constructive criticism - Focusing on what is best for the community - Showing empathy towards other community members</p>"},{"location":"development/contributing/#getting-started","title":"Getting Started","text":""},{"location":"development/contributing/#prerequisites","title":"Prerequisites","text":"<p>Before contributing, ensure you have:</p> <ol> <li>Go 1.21+ installed</li> <li>Git configured with your name and email</li> <li>Make installed (for build tasks)</li> <li>Docker (optional, for containerized development)</li> </ol>"},{"location":"development/contributing/#fork-and-clone","title":"Fork and Clone","text":"<ol> <li>Fork the repository on GitHub</li> <li>Clone your fork:</li> </ol> <pre><code>git clone https://github.com/YOUR_USERNAME/web-app-CAA.git\ncd web-app-CAA\n</code></pre> <ol> <li>Add the upstream remote:</li> </ol> <pre><code>git remote add upstream https://github.com/dnviti/web-app-CAA.git\n</code></pre>"},{"location":"development/contributing/#environment-setup","title":"Environment Setup","text":"<ol> <li>Copy the environment configuration:</li> </ol> <pre><code>cp .env.example .env\n</code></pre> <ol> <li>Install dependencies:</li> </ol> <pre><code>go mod download\n</code></pre> <ol> <li>Set up the database:</li> </ol> <pre><code>make setup-db\n</code></pre> <ol> <li>Run the application:</li> </ol> <pre><code>make run\n</code></pre> <p>The application should be available at <code>http://localhost:8080</code>.</p>"},{"location":"development/contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"development/contributing/#branch-strategy","title":"Branch Strategy","text":"<p>We use a simplified Git flow:</p> <ul> <li><code>main</code>: Production-ready code</li> <li><code>develop</code>: Integration branch for features</li> <li><code>feature/*</code>: Feature branches</li> <li><code>bugfix/*</code>: Bug fix branches</li> <li><code>hotfix/*</code>: Critical fixes for production</li> </ul>"},{"location":"development/contributing/#creating-a-feature-branch","title":"Creating a Feature Branch","text":"<ol> <li>Sync with upstream:</li> </ol> <pre><code>git checkout main\ngit pull upstream main\n</code></pre> <ol> <li>Create and switch to a feature branch:</li> </ol> <pre><code># Sync with upstream\ngit checkout main\ngit pull upstream main\n\n# Create feature branch\ngit checkout -b feature/your-feature-name\n</code></pre>"},{"location":"development/contributing/#2-make-your-changes","title":"2. Make Your Changes","text":"<p>Follow our coding standards and project structure:</p> <ul> <li>Code Style: Follow Go best practices and <code>gofmt</code> formatting</li> <li>Comments: Document public functions and complex logic</li> <li>Tests: Add tests for new functionality</li> <li>Commit Messages: Use clear, descriptive commit messages</li> </ul>"},{"location":"development/contributing/#3-test-your-changes","title":"3. Test Your Changes","text":"<pre><code># Run tests\nmake test\n\n# Check code formatting\nmake fmt\n\n# Run linters (if available)\nmake lint\n\n# Test the application manually\nmake dev\n</code></pre>"},{"location":"development/contributing/#4-submit-a-pull-request","title":"4. Submit a Pull Request","text":"<pre><code># Push your branch\ngit push origin feature/your-feature-name\n\n# Create pull request on GitHub\n# Include description of changes and any breaking changes\n</code></pre>"},{"location":"development/contributing/#coding-standards","title":"Coding Standards","text":""},{"location":"development/contributing/#go-code-style","title":"Go Code Style","text":"<p>Follow these Go conventions:</p>"},{"location":"development/contributing/#file-structure","title":"File Structure","text":"<pre><code>// Package declaration\npackage handlers\n\n// Imports organized: standard -&gt; third-party -&gt; local\nimport (\n    \"context\"\n    \"fmt\"\n\n    \"github.com/gin-gonic/gin\"\n\n    \"github.com/daniele/web-app-caa/internal/models\"\n    \"github.com/daniele/web-app-caa/internal/services\"\n)\n</code></pre>"},{"location":"development/contributing/#function-documentation","title":"Function Documentation","text":"<pre><code>// CreateUser creates a new user in the database with validation.\n// It returns an error if the username already exists or validation fails.\nfunc CreateUser(db *gorm.DB, user *models.User) error {\n    // Implementation\n}\n</code></pre>"},{"location":"development/contributing/#error-handling","title":"Error Handling","text":"<pre><code>// Proper error handling\nresult, err := someOperation()\nif err != nil {\n    log.Printf(\"Operation failed: %v\", err)\n    return fmt.Errorf(\"failed to complete operation: %w\", err)\n}\n</code></pre>"},{"location":"development/contributing/#variable-naming","title":"Variable Naming","text":"<pre><code>// Good: descriptive names\nuserService := services.NewUserService()\ngridItems := []models.GridItem{}\n\n// Avoid: abbreviated names\nusrSvc := services.NewUserService()\nitems := []models.GridItem{}\n</code></pre>"},{"location":"development/contributing/#database-changes","title":"Database Changes","text":"<p>When making database changes:</p> <ol> <li>Create Migration: Document schema changes</li> <li>Update Models: Modify GORM models accordingly</li> <li>Test Migration: Ensure both SQLite and MySQL work</li> <li>Backward Compatibility: Consider existing data</li> </ol> <p>Example model change: <pre><code>// Before\ntype User struct {\n    ID       uint   `gorm:\"primaryKey\"`\n    Username string `gorm:\"unique;not null\"`\n    Password string `gorm:\"not null\"`\n}\n\n// After - adding email field\ntype User struct {\n    ID       uint   `gorm:\"primaryKey\"`\n    Username string `gorm:\"unique;not null\"`\n    Password string `gorm:\"not null\"`\n    Email    string `gorm:\"unique\"` // New field, nullable for backward compatibility\n}\n</code></pre></p>"},{"location":"development/contributing/#api-changes","title":"API Changes","text":"<p>For API modifications:</p> <ol> <li>Maintain Compatibility: Don't break existing endpoints</li> <li>Version New Features: Use API versioning if needed</li> <li>Document Changes: Update API documentation</li> <li>Test Thoroughly: Ensure all clients continue working</li> </ol>"},{"location":"development/contributing/#project-areas","title":"Project Areas","text":""},{"location":"development/contributing/#core-components","title":"Core Components","text":""},{"location":"development/contributing/#1-authentication-system","title":"1. Authentication System","text":"<p>Location: <code>internal/handlers/auth.go</code>, <code>internal/services/user.go</code></p> <p>Contribution areas: - OAuth integration - Multi-factor authentication - Session management improvements - Password policy enhancements</p>"},{"location":"development/contributing/#2-grid-management","title":"2. Grid Management","text":"<p>Location: <code>internal/handlers/grid.go</code>, <code>internal/services/grid.go</code></p> <p>Contribution areas: - New grid templates - Advanced grid customization - Import/export functionality - Grid sharing features</p>"},{"location":"development/contributing/#3-ai-services","title":"3. AI Services","text":"<p>Location: <code>internal/services/ai.go</code>, <code>internal/services/llm.go</code></p> <p>Contribution areas: - Additional language support - New LLM integrations - Improved prompt engineering - Caching and performance</p>"},{"location":"development/contributing/#4-frontend","title":"4. Frontend","text":"<p>Location: <code>web/static/</code>, <code>web/templates/</code></p> <p>Contribution areas: - UI/UX improvements - Accessibility enhancements - Mobile responsiveness - Progressive Web App features</p>"},{"location":"development/contributing/#testing","title":"Testing","text":""},{"location":"development/contributing/#unit-tests","title":"Unit Tests","text":"<pre><code>func TestCreateUser(t *testing.T) {\n    // Setup\n    db := setupTestDB()\n    defer db.Close()\n\n    user := &amp;models.User{\n        Username: \"testuser\",\n        Password: \"hashedpassword\",\n    }\n\n    // Execute\n    err := CreateUser(db, user)\n\n    // Assert\n    assert.NoError(t, err)\n    assert.NotZero(t, user.ID)\n}\n</code></pre>"},{"location":"development/contributing/#integration-tests","title":"Integration Tests","text":"<pre><code>func TestUserRegistrationFlow(t *testing.T) {\n    // Setup test server\n    router := setupTestRouter()\n\n    // Test registration\n    payload := `{\"username\":\"newuser\",\"password\":\"password123\"}`\n    req := httptest.NewRequest(\"POST\", \"/api/register\", strings.NewReader(payload))\n    req.Header.Set(\"Content-Type\", \"application/json\")\n\n    w := httptest.NewRecorder()\n    router.ServeHTTP(w, req)\n\n    assert.Equal(t, http.StatusCreated, w.Code)\n}\n</code></pre>"},{"location":"development/contributing/#issue-guidelines","title":"Issue Guidelines","text":""},{"location":"development/contributing/#bug-reports","title":"Bug Reports","text":"<p>When reporting bugs, include:</p> <pre><code>## Bug Description\nClear description of the bug\n\n## Steps to Reproduce\n1. Step one\n2. Step two\n3. Step three\n\n## Expected Behavior\nWhat should happen\n\n## Actual Behavior\nWhat actually happens\n\n## Environment\n- OS: Ubuntu 20.04\n- Go version: 1.21.5\n- Docker version: 20.10.8\n\n## Additional Context\nScreenshots, logs, or other relevant information\n</code></pre>"},{"location":"development/contributing/#feature-requests","title":"Feature Requests","text":"<p>For feature requests:</p> <pre><code>## Feature Description\nClear description of the requested feature\n\n## Use Case\nWhy is this feature needed?\n\n## Proposed Solution\nHow should this feature work?\n\n## Alternatives Considered\nOther approaches you've thought about\n\n## Additional Context\nMockups, examples, or related issues\n</code></pre>"},{"location":"development/contributing/#documentation","title":"Documentation","text":""},{"location":"development/contributing/#code-documentation","title":"Code Documentation","text":"<ul> <li>Package Documentation: Describe package purpose</li> <li>Function Documentation: Document public APIs</li> <li>Example Usage: Provide examples for complex functions</li> <li>Inline Comments: Explain complex logic</li> </ul>"},{"location":"development/contributing/#user-documentation","title":"User Documentation","text":"<p>When adding features that affect users:</p> <ol> <li>Update API docs in <code>docs/api/</code></li> <li>Update user guides in <code>docs/getting-started/</code></li> <li>Add configuration examples</li> <li>Include screenshots for UI changes</li> </ol>"},{"location":"development/contributing/#release-process","title":"Release Process","text":""},{"location":"development/contributing/#version-numbering","title":"Version Numbering","text":"<p>We follow Semantic Versioning:</p> <ul> <li>MAJOR: Breaking changes</li> <li>MINOR: New features (backward compatible)</li> <li>PATCH: Bug fixes</li> </ul>"},{"location":"development/contributing/#release-checklist","title":"Release Checklist","text":"<ol> <li>Update Documentation</li> <li>Run Full Test Suite</li> <li>Update CHANGELOG.md</li> <li>Tag Release</li> <li>Build and Test Docker Images</li> <li>Create GitHub Release</li> </ol>"},{"location":"development/contributing/#community","title":"Community","text":""},{"location":"development/contributing/#communication","title":"Communication","text":"<ul> <li>GitHub Issues: Bug reports and feature requests</li> <li>GitHub Discussions: General questions and ideas</li> <li>Pull Request Reviews: Code collaboration</li> </ul>"},{"location":"development/contributing/#code-of-conduct_1","title":"Code of Conduct","text":"<p>We follow a code of conduct based on the Contributor Covenant:</p> <ul> <li>Be respectful and inclusive</li> <li>Be constructive in feedback</li> <li>Focus on what's best for the community</li> <li>Show empathy towards other community members</li> </ul>"},{"location":"development/contributing/#advanced-contributions","title":"Advanced Contributions","text":""},{"location":"development/contributing/#adding-new-llm-backends","title":"Adding New LLM Backends","text":"<p>To add support for a new LLM service:</p> <ol> <li> <p>Implement Client Interface:    <pre><code>type NewLLMClient struct {\n    apiKey string\n    baseURL string\n}\n\nfunc (c *NewLLMClient) Chat(prompt string) (string, error) {\n    // Implementation\n}\n</code></pre></p> </li> <li> <p>Update LLMService:    <pre><code>func (s *LLMService) initializeClients() {\n    switch s.backendType {\n    case \"ollama\":\n        s.ollamaClient = ollama.NewClient(s.llmHost)\n    case \"openai\":\n        s.openaiClient = openai.NewClient(s.openaiKey)\n    case \"newllm\":\n        s.newLLMClient = NewLLMClient(s.apiKey, s.baseURL)\n    }\n}\n</code></pre></p> </li> <li> <p>Add Configuration Support</p> </li> <li>Write Tests</li> <li>Update Documentation</li> </ol>"},{"location":"development/contributing/#adding-new-grid-templates","title":"Adding New Grid Templates","text":"<p>To create new grid templates:</p> <ol> <li> <p>Define Template Structure:    <pre><code>func NewCustomTemplate() []models.GridItem {\n    return []models.GridItem{\n        {\n            Type: \"category\",\n            Label: \"Custom Category\",\n            Icon: \"fa-custom\",\n            Color: \"#FF5722\",\n            Category: \"custom\",\n        },\n        // More items...\n    }\n}\n</code></pre></p> </li> <li> <p>Register Template:    <pre><code>templates := map[string]func() []models.GridItem{\n    \"default\": DefaultTemplate,\n    \"simplified\": SimplifiedTemplate,\n    \"empty\": EmptyTemplate,\n    \"custom\": NewCustomTemplate,\n}\n</code></pre></p> </li> <li> <p>Update Frontend Options</p> </li> <li>Add Tests and Documentation</li> </ol>"},{"location":"development/contributing/#getting-help","title":"Getting Help","text":"<p>If you need help with contributing:</p> <ol> <li>Check existing documentation in this repository</li> <li>Search existing issues for similar questions</li> <li>Create a new issue with your question</li> <li>Join the discussion in GitHub Discussions</li> </ol> <p>We appreciate all contributions, whether they're bug fixes, new features, documentation improvements, or simply reporting issues. Thank you for helping make Web App CAA better!</p> <p>Next: Testing Guide \u2192</p>"},{"location":"development/setup/","title":"Development Setup","text":"<p>This guide covers setting up a development environment for Web App CAA, including all necessary tools, dependencies, and configuration.</p>"},{"location":"development/setup/#prerequisites","title":"Prerequisites","text":""},{"location":"development/setup/#required-software","title":"Required Software","text":"<p>Ensure you have the following installed on your development machine:</p>"},{"location":"development/setup/#go-programming-language","title":"Go Programming Language","text":"<p>Version: 1.21 or higher</p> Linux (Ubuntu/Debian)macOSWindows <pre><code># Using package manager\nsudo apt update\nsudo apt install golang-go\n\n# Verify installation\ngo version\n</code></pre> <pre><code># Using Homebrew\nbrew install go\n\n# Or download from https://golang.org/dl/\ngo version\n</code></pre> <ol> <li>Download installer from golang.org/dl</li> <li>Run the installer</li> <li>Verify in Command Prompt: <code>go version</code></li> </ol>"},{"location":"development/setup/#git-version-control","title":"Git Version Control","text":"<pre><code># Linux (Ubuntu/Debian)\nsudo apt install git\n\n# macOS\nbrew install git\n\n# Windows: Download from https://git-scm.com/\n</code></pre>"},{"location":"development/setup/#make-optional-but-recommended","title":"Make (Optional but Recommended)","text":"<pre><code># Linux\nsudo apt install make\n\n# macOS (usually pre-installed)\nxcode-select --install\n\n# Windows (via Chocolatey)\nchoco install make\n</code></pre>"},{"location":"development/setup/#docker-optional","title":"Docker (Optional)","text":"<p>For containerized development: - Docker Desktop: Install Docker - Docker Compose: Usually included with Docker Desktop</p>"},{"location":"development/setup/#development-tools","title":"Development Tools","text":""},{"location":"development/setup/#recommended-code-editor","title":"Recommended Code Editor","text":"<ul> <li>VS Code with Go extension</li> <li>GoLand (JetBrains IDE)</li> <li>Vim/Neovim with go plugins</li> </ul>"},{"location":"development/setup/#vs-code-extensions","title":"VS Code Extensions","text":"<pre><code>{\n  \"recommendations\": [\n    \"golang.go\",\n    \"ms-vscode.vscode-json\",\n    \"bradlc.vscode-tailwindcss\",\n    \"ms-vscode.vscode-yaml\",\n    \"ms-vscode-remote.remote-containers\"\n  ]\n}\n</code></pre>"},{"location":"development/setup/#project-setup","title":"Project Setup","text":""},{"location":"development/setup/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code># Clone your fork\ngit clone https://github.com/YOUR_USERNAME/web-app-CAA.git\ncd web-app-CAA\n\n# Add upstream remote\ngit remote add upstream https://github.com/dnviti/web-app-CAA.git\n\n# Verify remotes\ngit remote -v\n</code></pre>"},{"location":"development/setup/#2-install-dependencies","title":"2. Install Dependencies","text":"<pre><code># Download Go modules\ngo mod download\ngo mod tidy\n\n# Or using Make\nmake deps\n</code></pre>"},{"location":"development/setup/#3-environment-configuration","title":"3. Environment Configuration","text":"<p>Create a development environment file:</p> <pre><code># Copy example configuration\ncp .env.example .env\n\n# Edit with your settings\nnano .env\n</code></pre> <p>Development <code>.env</code> file: <pre><code># Server Configuration\nAPP_PORT=3000\nAPP_HOST=localhost\nJWT_SECRET=development-jwt-secret-change-in-production\n\n# Database Configuration (SQLite for development)\nDB_DRIVER=sqlite\nDB_SQLITE_DIR=./data\nDB_SQLITE_FILE=database.sqlite\n\n# AI Configuration (optional - Ollama)\nBACKEND_TYPE=ollama\nLLM_HOST=http://localhost:11434\nLLM_MODEL=llama2\n\n# Debug Settings\nGIN_MODE=debug\nLOG_LEVEL=debug\n</code></pre></p>"},{"location":"development/setup/#4-database-setup","title":"4. Database Setup","text":"<p>The application will automatically create the SQLite database on first run:</p> <pre><code># Create data directory\nmkdir -p data\n\n# Set proper permissions\nchmod 755 data\n</code></pre>"},{"location":"development/setup/#5-ai-services-setup-optional","title":"5. AI Services Setup (Optional)","text":""},{"location":"development/setup/#option-a-ollama-local-ai","title":"Option A: Ollama (Local AI)","text":"<pre><code># Install Ollama\ncurl -fsSL https://ollama.ai/install.sh | sh\n\n# Start Ollama server\nollama serve\n\n# Download a model (in another terminal)\nollama pull llama2\n</code></pre>"},{"location":"development/setup/#option-b-openai-api","title":"Option B: OpenAI API","text":"<pre><code># Set OpenAI configuration in .env\necho \"BACKEND_TYPE=openai\" &gt;&gt; .env\necho \"OPENAI_API_KEY=your-api-key\" &gt;&gt; .env\necho \"LLM_MODEL=gpt-3.5-turbo\" &gt;&gt; .env\n</code></pre>"},{"location":"development/setup/#development-workflow","title":"Development Workflow","text":""},{"location":"development/setup/#1-start-development-server","title":"1. Start Development Server","text":"<pre><code># Using Make (recommended)\nmake dev\n\n# Or manually\ngo run ./cmd/web-app-caa/main.go\n</code></pre> <p>The application will be available at: <code>http://localhost:3000</code></p>"},{"location":"development/setup/#2-watch-for-changes","title":"2. Watch for Changes","text":"<p>For automatic rebuilds on file changes, use a tool like <code>air</code>:</p> <pre><code># Install air\ngo install github.com/cosmtrek/air@latest\n\n# Create air configuration\ncat &gt; .air.toml &lt;&lt; 'EOF'\nroot = \".\"\ntestdata_dir = \"testdata\"\ntmp_dir = \"tmp\"\n\n[build]\n  args_bin = []\n  bin = \"./tmp/main\"\n  cmd = \"go build -o ./tmp/main ./cmd/web-app-caa\"\n  delay = 1000\n  exclude_dir = [\"assets\", \"tmp\", \"vendor\", \"testdata\", \"data\"]\n  exclude_file = []\n  exclude_regex = [\"_test.go\"]\n  exclude_unchanged = false\n  follow_symlink = false\n  full_bin = \"\"\n  include_dir = []\n  include_ext = [\"go\", \"tpl\", \"tmpl\", \"html\"]\n  kill_delay = \"0s\"\n  log = \"build-errors.log\"\n  send_interrupt = false\n  stop_on_root = false\n\n[color]\n  app = \"\"\n  build = \"yellow\"\n  main = \"magenta\"\n  runner = \"green\"\n  watcher = \"cyan\"\n\n[log]\n  time = false\n\n[misc]\n  clean_on_exit = false\nEOF\n\n# Start with hot reload\nair\n</code></pre>"},{"location":"development/setup/#3-run-tests","title":"3. Run Tests","text":"<pre><code># Run all tests\nmake test\n\n# Or manually\ngo test ./...\n\n# Run tests with coverage\ngo test -cover ./...\n\n# Run specific test\ngo test ./internal/services -v\n</code></pre>"},{"location":"development/setup/#4-code-formatting","title":"4. Code Formatting","text":"<pre><code># Format code\nmake fmt\n\n# Or manually\ngo fmt ./...\ngofmt -s -w .\n</code></pre>"},{"location":"development/setup/#5-build-application","title":"5. Build Application","text":"<pre><code># Build binary\nmake build\n\n# Or manually\ngo build -o bin/web-app-caa ./cmd/web-app-caa\n</code></pre>"},{"location":"development/setup/#docker-development","title":"Docker Development","text":""},{"location":"development/setup/#using-docker-compose","title":"Using Docker Compose","text":"<pre><code># Start all services\nmake docker-up\n\n# Or manually\ndocker-compose up --build\n\n# Stop services\ndocker-compose down\n</code></pre>"},{"location":"development/setup/#development-container","title":"Development Container","text":"<p>Create a development container configuration:</p> <p>.devcontainer/devcontainer.json: <pre><code>{\n  \"name\": \"Web App CAA Dev\",\n  \"dockerComposeFile\": \"../docker-compose.yml\",\n  \"service\": \"webapp\",\n  \"workspaceFolder\": \"/app\",\n  \"features\": {\n    \"ghcr.io/devcontainers/features/go:1\": {\n      \"version\": \"1.21\"\n    }\n  },\n  \"customizations\": {\n    \"vscode\": {\n      \"extensions\": [\n        \"golang.go\",\n        \"ms-vscode.vscode-json\"\n      ]\n    }\n  },\n  \"forwardPorts\": [3000],\n  \"postCreateCommand\": \"go mod download\"\n}\n</code></pre></p>"},{"location":"development/setup/#debugging","title":"Debugging","text":""},{"location":"development/setup/#vs-code-debug-configuration","title":"VS Code Debug Configuration","text":"<p>Create .vscode/launch.json: <pre><code>{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Launch Package\",\n      \"type\": \"go\",\n      \"request\": \"launch\",\n      \"mode\": \"auto\",\n      \"program\": \"./cmd/web-app-caa\",\n      \"env\": {\n        \"APP_PORT\": \"3000\",\n        \"GIN_MODE\": \"debug\"\n      },\n      \"console\": \"integratedTerminal\"\n    }\n  ]\n}\n</code></pre></p>"},{"location":"development/setup/#debug-with-delve","title":"Debug with Delve","text":"<pre><code># Install delve debugger\ngo install github.com/go-delve/delve/cmd/dlv@latest\n\n# Start debugging session\ndlv debug ./cmd/web-app-caa\n\n# Set breakpoint and continue\n(dlv) break main.main\n(dlv) continue\n</code></pre>"},{"location":"development/setup/#database-development","title":"Database Development","text":""},{"location":"development/setup/#sqlite-management","title":"SQLite Management","text":"<pre><code># Access database directly\nsqlite3 data/database.sqlite\n\n# View tables\n.tables\n\n# Describe table structure\n.schema users\n\n# Query data\nSELECT * FROM users;\n</code></pre>"},{"location":"development/setup/#database-migrations","title":"Database Migrations","text":"<p>When modifying models:</p> <pre><code>// Add new field to model\ntype User struct {\n    ID       uint   `gorm:\"primaryKey\"`\n    Username string `gorm:\"unique;not null\"`\n    Password string `gorm:\"not null\"`\n    Email    string `gorm:\"unique\"` // New field\n}\n\n// GORM will auto-migrate on next run\n</code></pre>"},{"location":"development/setup/#frontend-development","title":"Frontend Development","text":""},{"location":"development/setup/#static-files-structure","title":"Static Files Structure","text":"<pre><code>web/\n\u251c\u2500\u2500 static/\n\u2502   \u251c\u2500\u2500 script/\n\u2502   \u2502   \u251c\u2500\u2500 auth.js\n\u2502   \u2502   \u251c\u2500\u2500 script.js\n\u2502   \u2502   \u2514\u2500\u2500 setup.js\n\u2502   \u2514\u2500\u2500 style/\n\u2502       \u251c\u2500\u2500 style.css\n\u2502       \u2514\u2500\u2500 setup.css\n\u2514\u2500\u2500 templates/\n    \u251c\u2500\u2500 layout.tmpl\n    \u251c\u2500\u2500 index.tmpl\n    \u2514\u2500\u2500 ...\n</code></pre>"},{"location":"development/setup/#live-reload-for-static-files","title":"Live Reload for Static Files","text":"<p>The Gin framework serves static files directly, so changes are reflected immediately without restart.</p>"},{"location":"development/setup/#template-development","title":"Template Development","text":"<p>Templates use Go's <code>html/template</code> package:</p> <pre><code>&lt;!-- templates/example.tmpl --&gt;\n{{define \"content\"}}\n&lt;div class=\"container\"&gt;\n    &lt;h1&gt;{{.Title}}&lt;/h1&gt;\n    {{if .User}}\n        &lt;p&gt;Welcome, {{.User.Username}}!&lt;/p&gt;\n    {{end}}\n&lt;/div&gt;\n{{end}}\n</code></pre>"},{"location":"development/setup/#testing","title":"Testing","text":""},{"location":"development/setup/#unit-tests","title":"Unit Tests","text":"<pre><code>// internal/services/user_test.go\nfunc TestCreateUser(t *testing.T) {\n    db := setupTestDB(t)\n    service := NewUserService(db)\n\n    user := &amp;models.User{\n        Username: \"testuser\",\n        Password: \"hashedpass\",\n    }\n\n    err := service.CreateUser(user)\n    assert.NoError(t, err)\n    assert.NotZero(t, user.ID)\n}\n</code></pre>"},{"location":"development/setup/#integration-tests","title":"Integration Tests","text":"<pre><code>func TestUserRegistration(t *testing.T) {\n    router := setupTestRouter()\n\n    payload := `{\"username\":\"newuser\",\"password\":\"password123\"}`\n    req := httptest.NewRequest(\"POST\", \"/api/register\", strings.NewReader(payload))\n    req.Header.Set(\"Content-Type\", \"application/json\")\n\n    w := httptest.NewRecorder()\n    router.ServeHTTP(w, req)\n\n    assert.Equal(t, http.StatusCreated, w.Code)\n}\n</code></pre>"},{"location":"development/setup/#test-database-setup","title":"Test Database Setup","text":"<pre><code>func setupTestDB(t *testing.T) *gorm.DB {\n    db, err := gorm.Open(sqlite.Open(\":memory:\"), &amp;gorm.Config{})\n    require.NoError(t, err)\n\n    err = db.AutoMigrate(&amp;models.User{}, &amp;models.GridItem{})\n    require.NoError(t, err)\n\n    return db\n}\n</code></pre>"},{"location":"development/setup/#performance-profiling","title":"Performance Profiling","text":""},{"location":"development/setup/#cpu-profiling","title":"CPU Profiling","text":"<pre><code>import _ \"net/http/pprof\"\n\n// Add to main.go\ngo func() {\n    log.Println(http.ListenAndServe(\"localhost:6060\", nil))\n}()\n</code></pre> <p>Access profiling at: <code>http://localhost:6060/debug/pprof/</code></p>"},{"location":"development/setup/#memory-profiling","title":"Memory Profiling","text":"<pre><code># Generate CPU profile\ngo tool pprof http://localhost:6060/debug/pprof/profile?seconds=30\n\n# Generate memory profile  \ngo tool pprof http://localhost:6060/debug/pprof/heap\n</code></pre>"},{"location":"development/setup/#common-development-tasks","title":"Common Development Tasks","text":""},{"location":"development/setup/#adding-a-new-api-endpoint","title":"Adding a New API Endpoint","text":"<ol> <li> <p>Define route in main.go: <pre><code>api.POST(\"/new-endpoint\", handlers.NewEndpoint)\n</code></pre></p> </li> <li> <p>Implement handler: <pre><code>func (h *Handler) NewEndpoint(c *gin.Context) {\n    // Implementation\n}\n</code></pre></p> </li> <li> <p>Add tests: <pre><code>func TestNewEndpoint(t *testing.T) {\n    // Test implementation\n}\n</code></pre></p> </li> <li> <p>Update documentation:</p> </li> <li>Add to API docs in <code>docs/api/</code></li> </ol>"},{"location":"development/setup/#adding-a-new-database-model","title":"Adding a New Database Model","text":"<ol> <li> <p>Define model: <pre><code>type NewModel struct {\n    ID        uint `gorm:\"primaryKey\"`\n    Name      string\n    CreatedAt time.Time\n}\n</code></pre></p> </li> <li> <p>Add to auto-migration: <pre><code>db.AutoMigrate(&amp;User{}, &amp;GridItem{}, &amp;NewModel{})\n</code></pre></p> </li> <li> <p>Create service methods: <pre><code>func (s *Service) CreateNewModel(model *NewModel) error {\n    return s.db.Create(model).Error\n}\n</code></pre></p> </li> </ol>"},{"location":"development/setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"development/setup/#common-issues","title":"Common Issues","text":"<p>Port already in use: <pre><code># Kill process using port 3000\nlsof -ti:3000 | xargs kill -9\n\n# Or use different port\nAPP_PORT=8080 make dev\n</code></pre></p> <p>Module download failures: <pre><code># Clear module cache\ngo clean -modcache\n\n# Set proxy\nexport GOPROXY=https://proxy.golang.org,direct\ngo mod download\n</code></pre></p> <p>Database locked: <pre><code># Stop all instances\npkill web-app-caa\n\n# Remove lock files\nrm -f data/*.sqlite-*\n</code></pre></p>"},{"location":"development/setup/#debug-logging","title":"Debug Logging","text":"<p>Enable verbose logging:</p> <pre><code># Set environment variables\nexport GIN_MODE=debug\nexport LOG_LEVEL=debug\n\n# Or in .env file\necho \"GIN_MODE=debug\" &gt;&gt; .env\necho \"LOG_LEVEL=debug\" &gt;&gt; .env\n</code></pre> <p>Next: Testing Guide \u2192</p>"},{"location":"development/testing/","title":"Testing Guide","text":"<p>This guide covers testing strategies, tools, and best practices for Web App CAA. The project uses Go's built-in testing framework along with additional testing utilities.</p>"},{"location":"development/testing/#testing-philosophy","title":"Testing Philosophy","text":"<p>Web App CAA follows a comprehensive testing approach:</p> <ul> <li>Unit Tests: Test individual functions and methods in isolation</li> <li>Integration Tests: Test component interactions and API endpoints  </li> <li>Database Tests: Test database operations with real database</li> <li>End-to-End Tests: Test complete user workflows</li> </ul>"},{"location":"development/testing/#testing-structure","title":"Testing Structure","text":"<pre><code>web-app-CAA/\n\u251c\u2500\u2500 internal/\n\u2502   \u251c\u2500\u2500 handlers/\n\u2502   \u2502   \u251c\u2500\u2500 auth.go\n\u2502   \u2502   \u2514\u2500\u2500 auth_test.go        # Handler tests\n\u2502   \u251c\u2500\u2500 services/\n\u2502   \u2502   \u251c\u2500\u2500 user.go\n\u2502   \u2502   \u2514\u2500\u2500 user_test.go        # Service tests\n\u2502   \u2514\u2500\u2500 models/\n\u2502       \u251c\u2500\u2500 models.go\n\u2502       \u2514\u2500\u2500 models_test.go      # Model tests\n\u251c\u2500\u2500 pkg/\n\u2502   \u2514\u2500\u2500 ollama/\n\u2502       \u251c\u2500\u2500 client.go\n\u2502       \u2514\u2500\u2500 client_test.go      # Package tests\n\u2514\u2500\u2500 tests/\n    \u251c\u2500\u2500 integration/            # Integration tests\n    \u251c\u2500\u2500 fixtures/               # Test data\n    \u2514\u2500\u2500 helpers/                # Test utilities\n</code></pre>"},{"location":"development/testing/#running-tests","title":"Running Tests","text":""},{"location":"development/testing/#basic-test-commands","title":"Basic Test Commands","text":"<pre><code># Run all tests\nmake test\n\n# Or manually\ngo test ./...\n\n# Run tests with verbose output\ngo test -v ./...\n\n# Run specific package tests\ngo test ./internal/services\n\n# Run specific test function\ngo test -run TestCreateUser ./internal/services\n</code></pre>"},{"location":"development/testing/#test-coverage","title":"Test Coverage","text":"<pre><code># Run tests with coverage\ngo test -cover ./...\n\n# Generate detailed coverage report\ngo test -coverprofile=coverage.out ./...\ngo tool cover -html=coverage.out -o coverage.html\n\n# View coverage in browser\nopen coverage.html\n</code></pre>"},{"location":"development/testing/#continuous-testing","title":"Continuous Testing","text":"<p>Use <code>go test</code> with file watching:</p> <pre><code># Install gotestsum for better output\ngo install gotest.tools/gotestsum@latest\n\n# Run tests on file changes\ngotestsum --watch ./...\n</code></pre>"},{"location":"development/testing/#unit-testing","title":"Unit Testing","text":""},{"location":"development/testing/#service-layer-tests","title":"Service Layer Tests","text":"<p>Example: User Service Test</p> <pre><code>// internal/services/user_test.go\npackage services\n\nimport (\n    \"testing\"\n    \"github.com/stretchr/testify/assert\"\n    \"github.com/stretchr/testify/require\"\n    \"gorm.io/driver/sqlite\"\n    \"gorm.io/gorm\"\n\n    \"github.com/daniele/web-app-caa/internal/models\"\n)\n\nfunc setupTestDB(t *testing.T) *gorm.DB {\n    db, err := gorm.Open(sqlite.Open(\":memory:\"), &amp;gorm.Config{})\n    require.NoError(t, err)\n\n    err = db.AutoMigrate(&amp;models.User{}, &amp;models.GridItem{})\n    require.NoError(t, err)\n\n    return db\n}\n\nfunc TestUserService_CreateUser(t *testing.T) {\n    tests := []struct {\n        name    string\n        user    *models.User\n        wantErr bool\n    }{\n        {\n            name: \"valid user\",\n            user: &amp;models.User{\n                Username: \"testuser\",\n                Password: \"hashedpassword\",\n            },\n            wantErr: false,\n        },\n        {\n            name: \"duplicate username\",\n            user: &amp;models.User{\n                Username: \"duplicate\",\n                Password: \"hashedpassword\",\n            },\n            wantErr: true,\n        },\n    }\n\n    for _, tt := range tests {\n        t.Run(tt.name, func(t *testing.T) {\n            db := setupTestDB(t)\n            service := NewUserService(db)\n\n            // Create duplicate user for second test\n            if tt.name == \"duplicate username\" {\n                existingUser := &amp;models.User{\n                    Username: \"duplicate\",\n                    Password: \"existing\",\n                }\n                require.NoError(t, service.CreateUser(existingUser))\n            }\n\n            err := service.CreateUser(tt.user)\n\n            if tt.wantErr {\n                assert.Error(t, err)\n            } else {\n                assert.NoError(t, err)\n                assert.NotZero(t, tt.user.ID)\n            }\n        })\n    }\n}\n\nfunc TestUserService_FindByUsername(t *testing.T) {\n    db := setupTestDB(t)\n    service := NewUserService(db)\n\n    // Create test user\n    testUser := &amp;models.User{\n        Username: \"findme\",\n        Password: \"password\",\n    }\n    require.NoError(t, service.CreateUser(testUser))\n\n    // Test finding existing user\n    found, err := service.FindByUsername(\"findme\")\n    assert.NoError(t, err)\n    assert.Equal(t, \"findme\", found.Username)\n\n    // Test finding non-existent user\n    _, err = service.FindByUsername(\"notfound\")\n    assert.Error(t, err)\n}\n</code></pre>"},{"location":"development/testing/#handler-tests","title":"Handler Tests","text":"<p>Example: Authentication Handler Test</p> <pre><code>// internal/handlers/auth_test.go\npackage handlers\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"net/http\"\n    \"net/http/httptest\"\n    \"testing\"\n\n    \"github.com/gin-gonic/gin\"\n    \"github.com/stretchr/testify/assert\"\n    \"github.com/stretchr/testify/require\"\n\n    \"github.com/daniele/web-app-caa/internal/models\"\n    \"github.com/daniele/web-app-caa/internal/services\"\n)\n\nfunc setupTestRouter() *gin.Engine {\n    gin.SetMode(gin.TestMode)\n\n    db := setupTestDB()\n    userService := services.NewUserService(db)\n    authHandlers := NewAuthHandlers(userService)\n\n    r := gin.New()\n    api := r.Group(\"/api\")\n    {\n        api.POST(\"/register\", authHandlers.Register)\n        api.POST(\"/login\", authHandlers.Login)\n    }\n\n    return r\n}\n\nfunc TestAuthHandlers_Register(t *testing.T) {\n    tests := []struct {\n        name       string\n        payload    map[string]interface{}\n        wantStatus int\n    }{\n        {\n            name: \"valid registration\",\n            payload: map[string]interface{}{\n                \"username\":       \"newuser\",\n                \"password\":       \"password123\",\n                \"editorPassword\": \"admin123\",\n            },\n            wantStatus: http.StatusCreated,\n        },\n        {\n            name: \"missing username\",\n            payload: map[string]interface{}{\n                \"password\":       \"password123\",\n                \"editorPassword\": \"admin123\",\n            },\n            wantStatus: http.StatusBadRequest,\n        },\n        {\n            name: \"short password\",\n            payload: map[string]interface{}{\n                \"username\":       \"newuser\",\n                \"password\":       \"123\",\n                \"editorPassword\": \"admin123\",\n            },\n            wantStatus: http.StatusBadRequest,\n        },\n    }\n\n    for _, tt := range tests {\n        t.Run(tt.name, func(t *testing.T) {\n            router := setupTestRouter()\n\n            jsonPayload, err := json.Marshal(tt.payload)\n            require.NoError(t, err)\n\n            req := httptest.NewRequest(\"POST\", \"/api/register\", bytes.NewReader(jsonPayload))\n            req.Header.Set(\"Content-Type\", \"application/json\")\n\n            w := httptest.NewRecorder()\n            router.ServeHTTP(w, req)\n\n            assert.Equal(t, tt.wantStatus, w.Code)\n\n            if tt.wantStatus == http.StatusCreated {\n                var response map[string]interface{}\n                err := json.Unmarshal(w.Body.Bytes(), &amp;response)\n                assert.NoError(t, err)\n                assert.Contains(t, response, \"user\")\n            }\n        })\n    }\n}\n\nfunc TestAuthHandlers_Login(t *testing.T) {\n    router := setupTestRouter()\n\n    // First register a user\n    registerPayload := map[string]string{\n        \"username\":       \"logintest\",\n        \"password\":       \"password123\",\n        \"editorPassword\": \"admin123\",\n    }\n\n    registerBody, _ := json.Marshal(registerPayload)\n    req := httptest.NewRequest(\"POST\", \"/api/register\", bytes.NewReader(registerBody))\n    req.Header.Set(\"Content-Type\", \"application/json\")\n    w := httptest.NewRecorder()\n    router.ServeHTTP(w, req)\n    require.Equal(t, http.StatusCreated, w.Code)\n\n    // Test login\n    loginPayload := map[string]string{\n        \"username\": \"logintest\",\n        \"password\": \"password123\",\n    }\n\n    loginBody, _ := json.Marshal(loginPayload)\n    req = httptest.NewRequest(\"POST\", \"/api/login\", bytes.NewReader(loginBody))\n    req.Header.Set(\"Content-Type\", \"application/json\")\n    w = httptest.NewRecorder()\n    router.ServeHTTP(w, req)\n\n    assert.Equal(t, http.StatusOK, w.Code)\n\n    var response map[string]interface{}\n    err := json.Unmarshal(w.Body.Bytes(), &amp;response)\n    assert.NoError(t, err)\n    assert.Contains(t, response, \"token\")\n    assert.Contains(t, response, \"user\")\n}\n</code></pre>"},{"location":"development/testing/#integration-testing","title":"Integration Testing","text":""},{"location":"development/testing/#database-integration-tests","title":"Database Integration Tests","text":"<pre><code>// tests/integration/database_test.go\npackage integration\n\nimport (\n    \"os\"\n    \"testing\"\n\n    \"github.com/stretchr/testify/assert\"\n    \"github.com/stretchr/testify/require\"\n\n    \"github.com/daniele/web-app-caa/internal/database\"\n    \"github.com/daniele/web-app-caa/internal/models\"\n    \"github.com/daniele/web-app-caa/internal/services\"\n)\n\nfunc TestDatabaseIntegration(t *testing.T) {\n    // Use temporary SQLite database\n    tempFile, err := os.CreateTemp(\"\", \"test_*.sqlite\")\n    require.NoError(t, err)\n    defer os.Remove(tempFile.Name())\n\n    // Set test database configuration\n    os.Setenv(\"DB_DRIVER\", \"sqlite\")\n    os.Setenv(\"DB_SQLITE_FILE\", tempFile.Name())\n\n    // Initialize database\n    database.Initialize()\n    db := database.GetDB()\n\n    // Test user operations\n    userService := services.NewUserService(db)\n\n    user := &amp;models.User{\n        Username: \"integrationtest\",\n        Password: \"hashedpassword\",\n    }\n\n    err = userService.CreateUser(user)\n    assert.NoError(t, err)\n\n    found, err := userService.FindByUsername(\"integrationtest\")\n    assert.NoError(t, err)\n    assert.Equal(t, user.Username, found.Username)\n\n    // Test grid operations\n    gridService := services.NewGridService(db)\n\n    gridItem := &amp;models.GridItem{\n        UserID:   user.ID,\n        Type:     \"item\",\n        Label:    \"Test Item\",\n        Category: \"test\",\n    }\n\n    err = gridService.CreateItem(gridItem)\n    assert.NoError(t, err)\n\n    items, err := gridService.GetUserItems(user.ID)\n    assert.NoError(t, err)\n    assert.Len(t, items, 1)\n    assert.Equal(t, \"Test Item\", items[0].Label)\n}\n</code></pre>"},{"location":"development/testing/#api-integration-tests","title":"API Integration Tests","text":"<pre><code>// tests/integration/api_test.go\npackage integration\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"net/http\"\n    \"net/http/httptest\"\n    \"testing\"\n\n    \"github.com/stretchr/testify/assert\"\n    \"github.com/stretchr/testify/require\"\n\n    \"github.com/daniele/web-app-caa/internal/handlers\"\n)\n\nfunc TestUserRegistrationFlow(t *testing.T) {\n    router := setupIntegrationRouter()\n\n    // Step 1: Register user\n    registerData := map[string]string{\n        \"username\":       \"flowtest\",\n        \"password\":       \"password123\",\n        \"editorPassword\": \"admin123\",\n    }\n\n    body, _ := json.Marshal(registerData)\n    req := httptest.NewRequest(\"POST\", \"/api/register\", bytes.NewReader(body))\n    req.Header.Set(\"Content-Type\", \"application/json\")\n\n    w := httptest.NewRecorder()\n    router.ServeHTTP(w, req)\n\n    require.Equal(t, http.StatusCreated, w.Code)\n\n    // Step 2: Login user\n    loginData := map[string]string{\n        \"username\": \"flowtest\",\n        \"password\": \"password123\",\n    }\n\n    body, _ = json.Marshal(loginData)\n    req = httptest.NewRequest(\"POST\", \"/api/login\", bytes.NewReader(body))\n    req.Header.Set(\"Content-Type\", \"application/json\")\n\n    w = httptest.NewRecorder()\n    router.ServeHTTP(w, req)\n\n    require.Equal(t, http.StatusOK, w.Code)\n\n    var loginResponse map[string]interface{}\n    err := json.Unmarshal(w.Body.Bytes(), &amp;loginResponse)\n    require.NoError(t, err)\n\n    token := loginResponse[\"token\"].(string)\n    require.NotEmpty(t, token)\n\n    // Step 3: Setup grid\n    setupData := map[string]string{\n        \"gridType\": \"simplified\",\n    }\n\n    body, _ = json.Marshal(setupData)\n    req = httptest.NewRequest(\"POST\", \"/api/setup\", bytes.NewReader(body))\n    req.Header.Set(\"Content-Type\", \"application/json\")\n    req.Header.Set(\"Authorization\", \"Bearer \"+token)\n\n    w = httptest.NewRecorder()\n    router.ServeHTTP(w, req)\n\n    assert.Equal(t, http.StatusCreated, w.Code)\n\n    // Step 4: Get grid\n    req = httptest.NewRequest(\"GET\", \"/api/grid\", nil)\n    req.Header.Set(\"Authorization\", \"Bearer \"+token)\n\n    w = httptest.NewRecorder()\n    router.ServeHTTP(w, req)\n\n    assert.Equal(t, http.StatusOK, w.Code)\n\n    var gridResponse map[string]interface{}\n    err = json.Unmarshal(w.Body.Bytes(), &amp;gridResponse)\n    assert.NoError(t, err)\n    assert.Contains(t, gridResponse, \"items\")\n}\n</code></pre>"},{"location":"development/testing/#ai-service-testing","title":"AI Service Testing","text":""},{"location":"development/testing/#mocking-ai-backends","title":"Mocking AI Backends","text":"<pre><code>// tests/mocks/llm_mock.go\npackage mocks\n\nimport (\n    \"github.com/stretchr/testify/mock\"\n)\n\ntype MockLLMService struct {\n    mock.Mock\n}\n\nfunc (m *MockLLMService) ConjugateWithTemplates(req models.ConjugateRequest) (map[string]interface{}, error) {\n    args := m.Called(req)\n    return args.Get(0).(map[string]interface{}), args.Error(1)\n}\n\nfunc (m *MockLLMService) CorrectWithTemplate(req models.CorrectRequest) (map[string]interface{}, error) {\n    args := m.Called(req)\n    return args.Get(0).(map[string]interface{}), args.Error(1)\n}\n\n// Test using mock\nfunc TestAIService_Conjugate(t *testing.T) {\n    mockLLM := new(MockLLMService)\n    aiService := &amp;AIService{llmService: mockLLM}\n\n    expectedResult := map[string]interface{}{\n        \"mangiare\": \"mangio\",\n    }\n\n    mockLLM.On(\"ConjugateWithTemplates\", mock.AnythingOfType(\"models.ConjugateRequest\")).\n        Return(expectedResult, nil)\n\n    result, err := aiService.Conjugate(models.ConjugateRequest{\n        Sentence:  \"Io mangiare\",\n        BaseForms: []string{\"mangiare\"},\n        Tense:     \"presente\",\n    })\n\n    assert.NoError(t, err)\n    assert.Equal(t, expectedResult, result)\n    mockLLM.AssertExpectations(t)\n}\n</code></pre>"},{"location":"development/testing/#ai-integration-tests","title":"AI Integration Tests","text":"<pre><code>func TestAIServiceIntegration(t *testing.T) {\n    // Skip if no AI backend configured\n    if os.Getenv(\"BACKEND_TYPE\") == \"\" {\n        t.Skip(\"No AI backend configured\")\n    }\n\n    llmService := services.NewLLMService()\n\n    req := models.ConjugateRequest{\n        Sentence:  \"Io mangiare la pizza\",\n        BaseForms: []string{\"mangiare\"},\n        Tense:     \"presente\",\n    }\n\n    result, err := llmService.ConjugateWithTemplates(req)\n    assert.NoError(t, err)\n    assert.Contains(t, result, \"mangiare\")\n\n    // Verify conjugation is correct\n    conjugation := result[\"mangiare\"].(string)\n    assert.Equal(t, \"mangio\", conjugation)\n}\n</code></pre>"},{"location":"development/testing/#test-utilities","title":"Test Utilities","text":""},{"location":"development/testing/#test-helpers","title":"Test Helpers","text":"<pre><code>// tests/helpers/test_helpers.go\npackage helpers\n\nimport (\n    \"testing\"\n\n    \"github.com/stretchr/testify/require\"\n    \"gorm.io/driver/sqlite\"\n    \"gorm.io/gorm\"\n\n    \"github.com/daniele/web-app-caa/internal/models\"\n)\n\nfunc SetupTestDB(t *testing.T) *gorm.DB {\n    db, err := gorm.Open(sqlite.Open(\":memory:\"), &amp;gorm.Config{})\n    require.NoError(t, err)\n\n    err = db.AutoMigrate(&amp;models.User{}, &amp;models.GridItem{})\n    require.NoError(t, err)\n\n    return db\n}\n\nfunc CreateTestUser(t *testing.T, db *gorm.DB, username string) *models.User {\n    user := &amp;models.User{\n        Username: username,\n        Password: \"hashedpassword\",\n    }\n\n    err := db.Create(user).Error\n    require.NoError(t, err)\n\n    return user\n}\n\nfunc CreateTestGridItems(t *testing.T, db *gorm.DB, userID uint, count int) []models.GridItem {\n    items := make([]models.GridItem, count)\n\n    for i := 0; i &lt; count; i++ {\n        items[i] = models.GridItem{\n            UserID:   userID,\n            Type:     \"item\",\n            Label:    fmt.Sprintf(\"Item %d\", i+1),\n            Category: \"test\",\n        }\n    }\n\n    err := db.CreateInBatches(items, 100).Error\n    require.NoError(t, err)\n\n    return items\n}\n</code></pre>"},{"location":"development/testing/#test-data-fixtures","title":"Test Data Fixtures","text":"<pre><code>// tests/fixtures/users.go\npackage fixtures\n\nimport (\n    \"github.com/daniele/web-app-caa/internal/models\"\n)\n\nvar TestUsers = []models.User{\n    {\n        Username: \"testuser1\",\n        Password: \"hashedpass1\",\n        Status:   \"active\",\n    },\n    {\n        Username: \"testuser2\", \n        Password: \"hashedpass2\",\n        Status:   \"pending_setup\",\n    },\n}\n\nvar TestGridItems = []models.GridItem{\n    {\n        Type:     \"category\",\n        Label:    \"Verbi\",\n        Icon:     \"fa-play\",\n        Category: \"verbi\",\n    },\n    {\n        Type:     \"item\",\n        Label:    \"Mangiare\",\n        Icon:     \"fa-utensils\",\n        Category: \"verbi\",\n        Text:     \"mangiare\",\n        Speak:    \"mangiare\",\n    },\n}\n</code></pre>"},{"location":"development/testing/#benchmarking","title":"Benchmarking","text":""},{"location":"development/testing/#performance-tests","title":"Performance Tests","text":"<pre><code>// internal/services/user_bench_test.go\nfunc BenchmarkUserService_CreateUser(b *testing.B) {\n    db := setupTestDB(&amp;testing.T{})\n    service := NewUserService(db)\n\n    b.ResetTimer()\n\n    for i := 0; i &lt; b.N; i++ {\n        user := &amp;models.User{\n            Username: fmt.Sprintf(\"user%d\", i),\n            Password: \"password\",\n        }\n\n        err := service.CreateUser(user)\n        if err != nil {\n            b.Fatal(err)\n        }\n    }\n}\n\nfunc BenchmarkUserService_FindByUsername(b *testing.B) {\n    db := setupTestDB(&amp;testing.T{})\n    service := NewUserService(db)\n\n    // Create test users\n    for i := 0; i &lt; 1000; i++ {\n        user := &amp;models.User{\n            Username: fmt.Sprintf(\"user%d\", i),\n            Password: \"password\",\n        }\n        service.CreateUser(user)\n    }\n\n    b.ResetTimer()\n\n    for i := 0; i &lt; b.N; i++ {\n        username := fmt.Sprintf(\"user%d\", i%1000)\n        _, err := service.FindByUsername(username)\n        if err != nil {\n            b.Fatal(err)\n        }\n    }\n}\n</code></pre> <p>Run benchmarks:</p> <pre><code># Run benchmarks\ngo test -bench=. ./internal/services\n\n# Run with memory allocation stats\ngo test -bench=. -benchmem ./internal/services\n\n# Run specific benchmark\ngo test -bench=BenchmarkUserService_CreateUser ./internal/services\n</code></pre>"},{"location":"development/testing/#continuous-integration","title":"Continuous Integration","text":""},{"location":"development/testing/#github-actions-test-workflow","title":"GitHub Actions Test Workflow","text":"<pre><code># .github/workflows/test.yml\nname: Tests\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        go-version: [1.21, 1.22]\n\n    steps:\n    - uses: actions/checkout@v4\n\n    - name: Set up Go\n      uses: actions/setup-go@v4\n      with:\n        go-version: ${{ matrix.go-version }}\n\n    - name: Cache dependencies\n      uses: actions/cache@v3\n      with:\n        path: ~/go/pkg/mod\n        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}\n\n    - name: Install dependencies\n      run: go mod download\n\n    - name: Run tests\n      run: go test -v -race -coverprofile=coverage.out ./...\n\n    - name: Upload coverage\n      uses: codecov/codecov-action@v3\n      with:\n        file: ./coverage.out\n</code></pre>"},{"location":"development/testing/#testing-best-practices","title":"Testing Best Practices","text":""},{"location":"development/testing/#1-test-organization","title":"1. Test Organization","text":"<ul> <li>One test file per source file (<code>user.go</code> \u2192 <code>user_test.go</code>)</li> <li>Group related tests in the same package</li> <li>Use descriptive test names</li> </ul>"},{"location":"development/testing/#2-test-data-management","title":"2. Test Data Management","text":"<ul> <li>Use in-memory databases for unit tests</li> <li>Create fixtures for complex test data</li> <li>Clean up test data after each test</li> </ul>"},{"location":"development/testing/#3-assertion-guidelines","title":"3. Assertion Guidelines","text":"<ul> <li>Use <code>require</code> for critical assertions that should stop the test</li> <li>Use <code>assert</code> for non-critical assertions</li> <li>Check both success and error cases</li> </ul>"},{"location":"development/testing/#4-mock-usage","title":"4. Mock Usage","text":"<ul> <li>Mock external dependencies (databases, APIs)</li> <li>Don't mock what you don't own</li> <li>Verify mock expectations</li> </ul>"},{"location":"development/testing/#5-test-coverage","title":"5. Test Coverage","text":"<ul> <li>Aim for 80%+ test coverage</li> <li>Focus on critical business logic</li> <li>Don't chase 100% coverage blindly</li> </ul>"},{"location":"development/testing/#6-performance-testing","title":"6. Performance Testing","text":"<ul> <li>Write benchmarks for performance-critical code</li> <li>Test with realistic data sizes</li> <li>Monitor performance regression</li> </ul> <p>Next: Contributing Guide \u2192</p>"},{"location":"getting-started/configuration/","title":"Configuration Guide","text":"<p>This guide covers all configuration options available in Web App CAA, from basic setup to advanced production configurations.</p>"},{"location":"getting-started/configuration/#configuration-methods","title":"Configuration Methods","text":"<p>Web App CAA supports multiple configuration methods, listed in order of precedence:</p> <ol> <li>Environment Variables (highest priority)</li> <li><code>.env</code> File (project root)</li> <li>Default Values (built-in defaults)</li> </ol>"},{"location":"getting-started/configuration/#environment-variables","title":"Environment Variables","text":""},{"location":"getting-started/configuration/#server-configuration","title":"Server Configuration","text":"Variable Description Default Example <code>APP_PORT</code> Server port <code>3000</code> <code>8080</code> <code>APP_HOST</code> Server host <code>localhost</code> <code>0.0.0.0</code> <code>JWT_SECRET</code> JWT signing secret <code>your-default-secret-key</code> <code>my-super-secret-jwt-key</code> <p>Security Notice</p> <p>Always set a unique <code>JWT_SECRET</code> in production environments!</p>"},{"location":"getting-started/configuration/#database-configuration","title":"Database Configuration","text":""},{"location":"getting-started/configuration/#common-settings","title":"Common Settings","text":"Variable Description Default Options <code>DB_DRIVER</code> Database type <code>sqlite</code> <code>sqlite</code>, <code>mysql</code>"},{"location":"getting-started/configuration/#sqlite-configuration","title":"SQLite Configuration","text":"Variable Description Default Example <code>DB_SQLITE_DIR</code> Database directory <code>./data</code> <code>/var/lib/webapp</code> <code>DB_SQLITE_FILE</code> Database filename <code>database.sqlite</code> <code>webapp.db</code>"},{"location":"getting-started/configuration/#mysql-configuration","title":"MySQL Configuration","text":"Variable Description Default Example <code>DB_HOST</code> MySQL host <code>localhost</code> <code>mysql.example.com</code> <code>DB_PORT</code> MySQL port <code>3306</code> <code>3306</code> <code>DB_USER</code> MySQL username <code>root</code> <code>webapp_user</code> <code>DB_PASSWORD</code> MySQL password (empty) <code>secure_password</code> <code>DB_NAME</code> Database name <code>webapp_caa</code> <code>production_db</code> <code>DB_CHARSET</code> Character set <code>utf8mb4</code> <code>utf8mb4</code> <code>DB_PARSE_TIME</code> Parse time values <code>true</code> <code>true</code>, <code>false</code> <code>DB_LOC</code> Timezone location <code>Local</code> <code>UTC</code>, <code>Europe/Rome</code>"},{"location":"getting-started/configuration/#connection-pool-settings","title":"Connection Pool Settings","text":"Variable Description Default Recommended <code>DB_MAX_OPEN_CONNS</code> Maximum open connections <code>25</code> <code>25-100</code> <code>DB_MAX_IDLE_CONNS</code> Maximum idle connections <code>5</code> <code>5-10</code> <code>DB_CONN_MAX_LIFETIME</code> Connection lifetime (none) <code>5m</code>"},{"location":"getting-started/configuration/#ai-service-configuration","title":"AI Service Configuration","text":"Variable Description Default Example <code>BACKEND_TYPE</code> AI backend type (none) <code>ollama</code>, <code>openai</code> <code>LLM_HOST</code> LLM API host URL (none) <code>http://localhost:11434</code> <code>LLM_MODEL</code> Model to use (none) <code>llama2</code>, <code>gpt-3.5-turbo</code> <code>OPENAI_API_KEY</code> OpenAI API key (none) <code>sk-...</code>"},{"location":"getting-started/configuration/#configuration-examples","title":"Configuration Examples","text":""},{"location":"getting-started/configuration/#development-setup","title":"Development Setup","text":"<p>Create a <code>.env</code> file in the project root:</p> <pre><code># Development Configuration\nAPP_PORT=3000\nAPP_HOST=localhost\nJWT_SECRET=development-secret-key\n\n# SQLite for development\nDB_DRIVER=sqlite\nDB_SQLITE_DIR=./data\nDB_SQLITE_FILE=database.sqlite\n\n# Local Ollama setup\nBACKEND_TYPE=ollama\nLLM_HOST=http://localhost:11434\nLLM_MODEL=llama2\n</code></pre>"},{"location":"getting-started/configuration/#production-setup","title":"Production Setup","text":"<pre><code># Production Configuration\nAPP_PORT=8080\nAPP_HOST=0.0.0.0\nJWT_SECRET=your-super-secure-production-jwt-secret\n\n# MySQL for production\nDB_DRIVER=mysql\nDB_HOST=mysql-server.internal\nDB_PORT=3306\nDB_USER=webapp_prod\nDB_PASSWORD=ultra-secure-database-password\nDB_NAME=webapp_caa_prod\nDB_MAX_OPEN_CONNS=50\nDB_MAX_IDLE_CONNS=10\nDB_CONN_MAX_LIFETIME=5m\n\n# OpenAI for AI services\nBACKEND_TYPE=openai\nLLM_HOST=https://api.openai.com/v1\nOPENAI_API_KEY=sk-your-openai-api-key-here\nLLM_MODEL=gpt-3.5-turbo\n</code></pre>"},{"location":"getting-started/configuration/#docker-configuration","title":"Docker Configuration","text":""},{"location":"getting-started/configuration/#environment-file","title":"Environment File","text":"<pre><code># Docker environment\nAPP_PORT=3000\nAPP_HOST=0.0.0.0\nJWT_SECRET=docker-secret-key\n\n# SQLite with volume mount\nDB_DRIVER=sqlite\nDB_SQLITE_DIR=/app/data\nDB_SQLITE_FILE=database.sqlite\n\n# External Ollama service\nBACKEND_TYPE=ollama\nLLM_HOST=http://ollama:11434\nLLM_MODEL=llama2\n</code></pre>"},{"location":"getting-started/configuration/#docker-compose","title":"Docker Compose","text":"<pre><code>version: '3.8'\n\nservices:\n  webapp:\n    build: .\n    ports:\n      - \"3000:3000\"\n    environment:\n      - APP_PORT=3000\n      - APP_HOST=0.0.0.0\n      - JWT_SECRET=${JWT_SECRET}\n      - DB_DRIVER=sqlite\n      - DB_SQLITE_DIR=/app/data\n      - BACKEND_TYPE=ollama\n      - LLM_HOST=http://ollama:11434\n      - LLM_MODEL=llama2\n    volumes:\n      - webapp_data:/app/data\n    depends_on:\n      - ollama\n\n  ollama:\n    image: ollama/ollama:latest\n    ports:\n      - \"11434:11434\"\n    volumes:\n      - ollama_models:/root/.ollama\n\nvolumes:\n  webapp_data:\n  ollama_models:\n</code></pre>"},{"location":"getting-started/configuration/#ai-service-configurations","title":"AI Service Configurations","text":""},{"location":"getting-started/configuration/#ollama-setup","title":"Ollama Setup","text":""},{"location":"getting-started/configuration/#1-install-and-configure-ollama","title":"1. Install and Configure Ollama","text":"<pre><code># Install Ollama\ncurl -fsSL https://ollama.ai/install.sh | sh\n\n# Start Ollama server\nollama serve\n\n# Download a model\nollama pull llama2\n</code></pre>"},{"location":"getting-started/configuration/#2-application-configuration","title":"2. Application Configuration","text":"<pre><code>BACKEND_TYPE=ollama\nLLM_HOST=http://localhost:11434\nLLM_MODEL=llama2\n</code></pre>"},{"location":"getting-started/configuration/#3-available-models","title":"3. Available Models","text":"Model Size Use Case <code>llama2</code> 7B General purpose, fast <code>llama2:13b</code> 13B Better quality, slower <code>codellama</code> 7B Code-focused <code>mistral</code> 7B Multilingual, efficient"},{"location":"getting-started/configuration/#openai-compatible-apis","title":"OpenAI-Compatible APIs","text":""},{"location":"getting-started/configuration/#openai","title":"OpenAI","text":"<pre><code>BACKEND_TYPE=openai\nLLM_HOST=https://api.openai.com/v1\nOPENAI_API_KEY=sk-your-api-key\nLLM_MODEL=gpt-3.5-turbo\n</code></pre>"},{"location":"getting-started/configuration/#azure-openai","title":"Azure OpenAI","text":"<pre><code>BACKEND_TYPE=openai\nLLM_HOST=https://your-resource.openai.azure.com\nOPENAI_API_KEY=your-azure-api-key\nLLM_MODEL=gpt-35-turbo\n</code></pre>"},{"location":"getting-started/configuration/#local-openai-compatible","title":"Local OpenAI-Compatible","text":"<pre><code>BACKEND_TYPE=openai\nLLM_HOST=http://localhost:8080/v1\nOPENAI_API_KEY=not-needed\nLLM_MODEL=local-model\n</code></pre>"},{"location":"getting-started/configuration/#database-configuration-details","title":"Database Configuration Details","text":""},{"location":"getting-started/configuration/#sqlite-configuration_1","title":"SQLite Configuration","text":""},{"location":"getting-started/configuration/#file-location","title":"File Location","text":"<pre><code># Relative path (development)\nDB_SQLITE_DIR=./data\nDB_SQLITE_FILE=database.sqlite\n\n# Absolute path (production)\nDB_SQLITE_DIR=/var/lib/webapp-caa\nDB_SQLITE_FILE=webapp.db\n</code></pre>"},{"location":"getting-started/configuration/#performance-tuning","title":"Performance Tuning","text":"<p>SQLite performs well for most use cases but consider these optimizations:</p> <ul> <li>Use SSD storage for better I/O performance</li> <li>Regular <code>VACUUM</code> operations to reclaim space</li> <li>WAL mode is enabled by default for better concurrency</li> </ul>"},{"location":"getting-started/configuration/#mysql-configuration_1","title":"MySQL Configuration","text":""},{"location":"getting-started/configuration/#connection-string-format","title":"Connection String Format","text":"<p>The application builds connection strings like: <pre><code>username:password@tcp(host:port)/database?charset=utf8mb4&amp;parseTime=True&amp;loc=Local\n</code></pre></p>"},{"location":"getting-started/configuration/#production-recommendations","title":"Production Recommendations","text":"<pre><code># Connection pool sizing\nDB_MAX_OPEN_CONNS=50\nDB_MAX_IDLE_CONNS=10\nDB_CONN_MAX_LIFETIME=5m\n\n# Character set and timezone\nDB_CHARSET=utf8mb4\nDB_PARSE_TIME=true\nDB_LOC=UTC\n</code></pre>"},{"location":"getting-started/configuration/#ssl-configuration","title":"SSL Configuration","text":"<p>For secure MySQL connections:</p> <pre><code># Enable SSL (connection string parameter)\n# This requires additional MySQL configuration\nDB_NAME=webapp_caa?tls=true\n</code></pre>"},{"location":"getting-started/configuration/#security-considerations","title":"Security Considerations","text":""},{"location":"getting-started/configuration/#jwt-secret","title":"JWT Secret","text":"<p>Critical Security</p> <p>The <code>JWT_SECRET</code> is used to sign authentication tokens. If compromised, attackers can forge valid tokens.</p>"},{"location":"getting-started/configuration/#requirements","title":"Requirements","text":"<ul> <li>Minimum 32 characters</li> <li>Use random, cryptographically secure strings</li> <li>Different for each environment</li> <li>Never commit to version control</li> </ul>"},{"location":"getting-started/configuration/#generation","title":"Generation","text":"<pre><code># Generate secure JWT secret\nopenssl rand -base64 32\n\n# Or using Python\npython -c \"import secrets; print(secrets.token_urlsafe(32))\"\n</code></pre>"},{"location":"getting-started/configuration/#database-security","title":"Database Security","text":""},{"location":"getting-started/configuration/#sqlite","title":"SQLite","text":"<ul> <li>Ensure proper file permissions (600)</li> <li>Store database files outside web root</li> <li>Regular backups with encryption</li> </ul>"},{"location":"getting-started/configuration/#mysql","title":"MySQL","text":"<ul> <li>Use dedicated database user with minimal privileges</li> <li>Enable SSL/TLS for connections</li> <li>Regular security updates</li> <li>Network-level protection (VPN, private networks)</li> </ul>"},{"location":"getting-started/configuration/#environment-variables_1","title":"Environment Variables","text":""},{"location":"getting-started/configuration/#best-practices","title":"Best Practices","text":"<ul> <li>Use <code>.env</code> files for local development only</li> <li>Use orchestration secrets in production (Docker secrets, Kubernetes secrets)</li> <li>Never commit sensitive values to git</li> <li>Use environment-specific values</li> </ul>"},{"location":"getting-started/configuration/#example-gitignore","title":"Example <code>.gitignore</code>","text":"<pre><code>.env\n.env.local\n.env.production\n*.sqlite\n*.sqlite-*\n</code></pre>"},{"location":"getting-started/configuration/#configuration-validation","title":"Configuration Validation","text":""},{"location":"getting-started/configuration/#startup-checks","title":"Startup Checks","text":"<p>The application performs these validation checks on startup:</p> <ol> <li>Required Environment Variables: Warns about missing critical settings</li> <li>Database Connection: Tests database connectivity</li> <li>AI Service Connection: Verifies LLM backend availability (if configured)</li> <li>File Permissions: Checks read/write access to required directories</li> </ol>"},{"location":"getting-started/configuration/#health-check-endpoint","title":"Health Check Endpoint","text":"<pre><code># Check application health\ncurl http://localhost:3000/health\n\n# Response includes configuration status\n{\n  \"status\": \"healthy\",\n  \"database\": \"connected\",\n  \"ai_service\": \"available\"\n}\n</code></pre>"},{"location":"getting-started/configuration/#configuration-troubleshooting","title":"Configuration Troubleshooting","text":""},{"location":"getting-started/configuration/#common-issues","title":"Common Issues","text":""},{"location":"getting-started/configuration/#environment-variables-not-loading","title":"Environment Variables Not Loading","text":"<pre><code># Check if .env file exists and is readable\nls -la .env\ncat .env\n\n# Verify environment variables are set\nenv | grep APP_\n</code></pre>"},{"location":"getting-started/configuration/#database-connection-failures","title":"Database Connection Failures","text":"<pre><code># Test SQLite\nls -la data/\nsqlite3 data/database.sqlite \".tables\"\n\n# Test MySQL\nmysql -h $DB_HOST -u $DB_USER -p$DB_PASSWORD $DB_NAME -e \"SHOW TABLES;\"\n</code></pre>"},{"location":"getting-started/configuration/#ai-service-unavailable","title":"AI Service Unavailable","text":"<pre><code># Test Ollama\ncurl http://localhost:11434/api/version\n\n# Test OpenAI-compatible API\ncurl -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  $LLM_HOST/models\n</code></pre>"},{"location":"getting-started/configuration/#debug-mode","title":"Debug Mode","text":"<p>Enable debug logging for troubleshooting:</p> <pre><code>GIN_MODE=debug\nLOG_LEVEL=debug\n</code></pre> <p>Next: Architecture Overview \u2192</p>"},{"location":"getting-started/installation/","title":"Installation Guide","text":"<p>This comprehensive guide covers all installation methods and requirements for Web App CAA.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":""},{"location":"getting-started/installation/#system-requirements","title":"System Requirements","text":"<ul> <li>Operating System: Linux, macOS, or Windows</li> <li>Memory: Minimum 512MB RAM, 1GB+ recommended</li> <li>Storage: At least 100MB free space</li> <li>Network: Internet connection for AI services (optional)</li> </ul>"},{"location":"getting-started/installation/#required-software","title":"Required Software","text":""},{"location":"getting-started/installation/#go-programming-language","title":"Go Programming Language","text":"<p>Web App CAA requires Go 1.21 or higher.</p> Linux (Ubuntu/Debian)macOSWindows <pre><code># Using package manager\nsudo apt update\nsudo apt install golang-go\n\n# Or download from official source\nwget https://go.dev/dl/go1.21.5.linux-amd64.tar.gz\nsudo tar -C /usr/local -xzf go1.21.5.linux-amd64.tar.gz\necho 'export PATH=$PATH:/usr/local/go/bin' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre> <pre><code># Using Homebrew\nbrew install go\n\n# Or download installer from https://golang.org/dl/\n</code></pre> <ol> <li>Download installer from golang.org/dl</li> <li>Run the <code>.msi</code> installer</li> <li>Add Go to your PATH (usually done automatically)</li> </ol>"},{"location":"getting-started/installation/#git-version-control","title":"Git Version Control","text":"<pre><code># Linux (Ubuntu/Debian)\nsudo apt install git\n\n# macOS\nbrew install git\n\n# Windows - Download from https://git-scm.com/\n</code></pre>"},{"location":"getting-started/installation/#make-build-tool-optional","title":"Make Build Tool (Optional)","text":"LinuxmacOSWindows <pre><code>sudo apt install make\n</code></pre> <pre><code># Usually pre-installed with Xcode Command Line Tools\nxcode-select --install\n</code></pre> <pre><code># Install via Chocolatey\nchoco install make\n\n# Or use Windows Subsystem for Linux (WSL)\n</code></pre>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"getting-started/installation/#method-1-source-installation-recommended","title":"Method 1: Source Installation (Recommended)","text":"<p>This is the most flexible method for development and customization.</p>"},{"location":"getting-started/installation/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/dnviti/web-app-CAA.git\ncd web-app-CAA\n</code></pre>"},{"location":"getting-started/installation/#2-install-dependencies","title":"2. Install Dependencies","text":"<pre><code># Using Make\nmake deps\n\n# Or manually\ngo mod download\ngo mod tidy\n</code></pre>"},{"location":"getting-started/installation/#3-build-the-application","title":"3. Build the Application","text":"<pre><code># Using Make\nmake build\n\n# Or manually\ngo build -o bin/web-app-caa ./cmd/web-app-caa/main.go\n</code></pre>"},{"location":"getting-started/installation/#4-run-the-application","title":"4. Run the Application","text":"<pre><code># Using Make\nmake run\n\n# Or manually\n./bin/web-app-caa\n</code></pre>"},{"location":"getting-started/installation/#method-2-docker-installation","title":"Method 2: Docker Installation","text":"<p>Perfect for containerized environments and easy deployment.</p>"},{"location":"getting-started/installation/#prerequisites_1","title":"Prerequisites","text":"<ul> <li>Docker 20.10+ - Install Docker</li> <li>Docker Compose 2.0+ - Usually included with Docker Desktop</li> </ul>"},{"location":"getting-started/installation/#option-a-using-docker-compose","title":"Option A: Using Docker Compose","text":"<pre><code># Clone the repository\ngit clone https://github.com/dnviti/web-app-CAA.git\ncd web-app-CAA\n\n# Build and start services\ndocker-compose up --build\n\n# Or using Make\nmake docker-up\n</code></pre>"},{"location":"getting-started/installation/#option-b-using-pre-built-image","title":"Option B: Using Pre-built Image","text":"<pre><code># Pull the latest image\ndocker pull ghcr.io/dnviti/web-app-caa:latest\n\n# Run with default settings\ndocker run -p 3000:3000 ghcr.io/dnviti/web-app-caa:latest\n\n# Run with custom configuration\ndocker run -p 8080:8080 \\\n  -e APP_PORT=8080 \\\n  -e JWT_SECRET=your-secret-key \\\n  ghcr.io/dnviti/web-app-caa:latest\n</code></pre>"},{"location":"getting-started/installation/#option-c-build-your-own-image","title":"Option C: Build Your Own Image","text":"<pre><code># Build the image\ndocker build -t web-app-caa .\n\n# Run the container\ndocker run -p 3000:3000 web-app-caa\n</code></pre>"},{"location":"getting-started/installation/#method-3-binary-releases","title":"Method 3: Binary Releases","text":"<p>Download pre-compiled binaries from the GitHub Releases page.</p> <pre><code># Download the latest release (adjust URL for your platform)\nwget https://github.com/dnviti/web-app-CAA/releases/latest/download/web-app-caa-linux-amd64\n\n# Make executable\nchmod +x web-app-caa-linux-amd64\n\n# Run\n./web-app-caa-linux-amd64\n</code></pre>"},{"location":"getting-started/installation/#configuration","title":"Configuration","text":""},{"location":"getting-started/installation/#environment-variables","title":"Environment Variables","text":"<p>Create a <code>.env</code> file in the project root:</p> <pre><code># Server Configuration\nAPP_PORT=3000\nAPP_HOST=localhost\nJWT_SECRET=your-super-secret-jwt-key\n\n# Database Configuration\nDB_DRIVER=sqlite\nDB_SQLITE_DIR=./data\nDB_SQLITE_FILE=database.sqlite\n\n# AI Configuration (Optional)\nBACKEND_TYPE=ollama\nLLM_HOST=http://localhost:11434\nLLM_MODEL=llama2\n</code></pre>"},{"location":"getting-started/installation/#database-setup","title":"Database Setup","text":""},{"location":"getting-started/installation/#sqlite-default","title":"SQLite (Default)","text":"<p>No additional setup required. The application will:</p> <ol> <li>Create the <code>./data/</code> directory</li> <li>Initialize <code>database.sqlite</code></li> <li>Run automatic migrations</li> </ol>"},{"location":"getting-started/installation/#mysql-production","title":"MySQL (Production)","text":"<ol> <li>Install MySQL Server</li> <li> <p>Create Database and User:    <pre><code>CREATE DATABASE webapp_caa;\nCREATE USER 'webapp'@'localhost' IDENTIFIED BY 'secure_password';\nGRANT ALL PRIVILEGES ON webapp_caa.* TO 'webapp'@'localhost';\nFLUSH PRIVILEGES;\n</code></pre></p> </li> <li> <p>Configure Environment:    <pre><code>DB_DRIVER=mysql\nDB_HOST=localhost\nDB_PORT=3306\nDB_USER=webapp\nDB_PASSWORD=secure_password\nDB_NAME=webapp_caa\n</code></pre></p> </li> </ol>"},{"location":"getting-started/installation/#ai-services-setup-optional","title":"AI Services Setup (Optional)","text":""},{"location":"getting-started/installation/#ollama-installation","title":"Ollama Installation","text":"LinuxmacOSWindows <pre><code>curl -fsSL https://ollama.ai/install.sh | sh\nollama serve\nollama pull llama2\n</code></pre> <pre><code>brew install ollama\nollama serve\nollama pull llama2\n</code></pre> <p>Download from ollama.ai and follow the installer.</p>"},{"location":"getting-started/installation/#openai-compatible-api","title":"OpenAI-Compatible API","text":"<pre><code>BACKEND_TYPE=openai\nLLM_HOST=https://api.openai.com/v1\nOPENAI_API_KEY=your-openai-api-key\nLLM_MODEL=gpt-3.5-turbo\n</code></pre>"},{"location":"getting-started/installation/#verification","title":"Verification","text":""},{"location":"getting-started/installation/#1-check-installation","title":"1. Check Installation","text":"<pre><code># Verify Go installation\ngo version\n\n# Should output: go version go1.21.x...\n\n# Check application build\n./bin/web-app-caa --help\n</code></pre>"},{"location":"getting-started/installation/#2-test-basic-functionality","title":"2. Test Basic Functionality","text":"<pre><code># Start the server\n./bin/web-app-caa\n\n# In another terminal, test the health endpoint\ncurl http://localhost:3000/api/health\n</code></pre>"},{"location":"getting-started/installation/#3-verify-database-connection","title":"3. Verify Database Connection","text":"<p>Check the logs for successful database initialization:</p> <pre><code>[INFO] Database initialized successfully\n[INFO] Auto-migration completed\n[INFO] Server starting on localhost:3000\n</code></pre>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#common-issues","title":"Common Issues","text":""},{"location":"getting-started/installation/#go-installation-issues","title":"Go Installation Issues","text":"<p>\"go: command not found\" <pre><code># Add Go to PATH\nexport PATH=$PATH:/usr/local/go/bin\necho 'export PATH=$PATH:/usr/local/go/bin' &gt;&gt; ~/.bashrc\n</code></pre></p> <p>Go version too old <pre><code># Update Go\nsudo rm -rf /usr/local/go\n# Download and install latest version\n</code></pre></p>"},{"location":"getting-started/installation/#build-errors","title":"Build Errors","text":"<p>Module download failures <pre><code># Set Go proxy\nexport GOPROXY=https://proxy.golang.org,direct\ngo mod download\n</code></pre></p> <p>Permission denied <pre><code># Fix permissions\nchmod +x bin/web-app-caa\n</code></pre></p>"},{"location":"getting-started/installation/#runtime-errors","title":"Runtime Errors","text":"<p>Port already in use <pre><code># Change port\nexport APP_PORT=8080\n./bin/web-app-caa\n</code></pre></p> <p>Database permission errors <pre><code># Create data directory with proper permissions\nmkdir -p data\nchmod 755 data\n</code></pre></p> <p>SQLite locked errors <pre><code># Stop all instances and remove lock files\npkill web-app-caa\nrm -f data/*.sqlite-*\n</code></pre></p>"},{"location":"getting-started/installation/#docker-issues","title":"Docker Issues","text":"<p>Permission denied (Docker) <pre><code># Add user to docker group\nsudo usermod -aG docker $USER\n# Logout and login again\n</code></pre></p> <p>Port conflicts <pre><code># Use different port\ndocker run -p 8080:3000 web-app-caa\n</code></pre></p>"},{"location":"getting-started/installation/#performance-tuning","title":"Performance Tuning","text":""},{"location":"getting-started/installation/#database-optimization","title":"Database Optimization","text":"<p>For MySQL in production:</p> <pre><code>DB_MAX_OPEN_CONNS=25\nDB_MAX_IDLE_CONNS=5\nDB_CONN_MAX_LIFETIME=5m\n</code></pre>"},{"location":"getting-started/installation/#memory-configuration","title":"Memory Configuration","text":"<pre><code># Set Go garbage collector target\nexport GOGC=100\n\n# For containers, limit memory\ndocker run -m 512m web-app-caa\n</code></pre>"},{"location":"getting-started/installation/#getting-help","title":"Getting Help","text":"<p>If you encounter issues not covered here:</p> <ol> <li>Check the Logs: Look for error messages in the application output</li> <li>Search Issues: Check GitHub Issues</li> <li>Create Issue: Open a new issue with:</li> <li>Your operating system</li> <li>Go version (<code>go version</code>)</li> <li>Error messages and logs</li> <li>Steps to reproduce</li> </ol> <p>Next: Configuration Guide \u2192</p>"},{"location":"getting-started/quick-start/","title":"Quick Start Guide","text":"<p>Get Web App CAA up and running in just a few minutes with this quick start guide.</p>"},{"location":"getting-started/quick-start/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following installed:</p> <ul> <li>Go 1.21 or higher - Download Go</li> <li>Git - For cloning the repository</li> <li>Make (optional) - For using Makefile commands</li> </ul>"},{"location":"getting-started/quick-start/#installation","title":"Installation","text":""},{"location":"getting-started/quick-start/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/dnviti/web-app-CAA.git\ncd web-app-CAA\n</code></pre>"},{"location":"getting-started/quick-start/#2-build-and-run","title":"2. Build and Run","text":""},{"location":"getting-started/quick-start/#option-a-using-make-recommended","title":"Option A: Using Make (Recommended)","text":"<pre><code># Install dependencies\nmake deps\n\n# Build the application\nmake build\n\n# Run the application\nmake run\n</code></pre>"},{"location":"getting-started/quick-start/#option-b-manual-build","title":"Option B: Manual Build","text":"<pre><code># Install dependencies\ngo mod tidy\n\n# Build the application\ngo build -o bin/web-app-caa ./cmd/web-app-caa\n\n# Run the application\n./bin/web-app-caa\n</code></pre>"},{"location":"getting-started/quick-start/#option-c-development-mode","title":"Option C: Development Mode","text":"<pre><code># Run directly without building binary\nmake dev\n\n# Or manually\ngo run ./cmd/web-app-caa/main.go\n</code></pre>"},{"location":"getting-started/quick-start/#3-access-the-application","title":"3. Access the Application","text":"<p>Once the server is running, open your browser and navigate to:</p> <pre><code>http://localhost:3000\n</code></pre> <p>You should see the Web App CAA login page.</p>"},{"location":"getting-started/quick-start/#first-time-setup","title":"First Time Setup","text":""},{"location":"getting-started/quick-start/#1-create-your-account","title":"1. Create Your Account","text":"<ol> <li>Click \"Registrati\" (Register) on the login page</li> <li>Fill in your credentials:</li> <li>Username: Choose a unique username</li> <li>Password: Create a secure password</li> <li>Editor Password: Set an administrative password</li> <li>Click \"Registrati\" to create your account</li> </ol>"},{"location":"getting-started/quick-start/#2-choose-your-grid-template","title":"2. Choose Your Grid Template","text":"<p>After registration, you'll be redirected to the setup page where you can choose from:</p> <ul> <li>Griglia Completa (Complete Grid): Full set of predefined categories</li> <li>Griglia Semplificata (Simplified Grid): Essential categories only  </li> <li>Griglia Vuota (Empty Grid): Start from scratch</li> </ul>"},{"location":"getting-started/quick-start/#3-start-using-the-grid","title":"3. Start Using the Grid","text":"<p>Once setup is complete, you'll have access to:</p> <ul> <li>Interactive communication grid</li> <li>AI-powered verb conjugation</li> <li>Sentence correction tools</li> <li>Grid customization options</li> </ul>"},{"location":"getting-started/quick-start/#docker-quick-start","title":"Docker Quick Start","text":"<p>If you prefer using Docker:</p>"},{"location":"getting-started/quick-start/#1-using-docker-compose-recommended","title":"1. Using Docker Compose (Recommended)","text":"<pre><code># Build and start all services\nmake docker-up\n\n# Or manually\ndocker-compose up --build\n</code></pre>"},{"location":"getting-started/quick-start/#2-using-pre-built-image","title":"2. Using Pre-built Image","text":"<pre><code># Pull the latest image\ndocker pull ghcr.io/dnviti/web-app-caa:latest\n\n# Run the container\ndocker run -p 3000:3000 ghcr.io/dnviti/web-app-caa:latest\n</code></pre>"},{"location":"getting-started/quick-start/#3-access-the-application_1","title":"3. Access the Application","text":"<p>Navigate to <code>http://localhost:3000</code> in your browser.</p>"},{"location":"getting-started/quick-start/#verification","title":"Verification","text":"<p>To verify everything is working correctly:</p>"},{"location":"getting-started/quick-start/#1-check-server-status","title":"1. Check Server Status","text":"<p>Look for these log messages when starting:</p> <pre><code>[STARTUP] Server configuration loaded:\n[STARTUP] - PORT: 3000\n[STARTUP] - HOST: localhost\n[STARTUP] - JWT_SECRET: [SET]\n[GIN-debug] Listening and serving HTTP on localhost:3000\n</code></pre>"},{"location":"getting-started/quick-start/#2-test-core-functionality","title":"2. Test Core Functionality","text":"<ol> <li>Registration: Create a new user account</li> <li>Login: Authenticate with your credentials</li> <li>Setup: Choose and configure your grid template</li> <li>Grid Access: View and interact with your communication grid</li> <li>AI Services: Test verb conjugation and sentence correction</li> </ol>"},{"location":"getting-started/quick-start/#3-database-verification","title":"3. Database Verification","text":"<p>The application will automatically:</p> <ul> <li>Create the <code>./data/</code> directory</li> <li>Initialize <code>database.sqlite</code></li> <li>Run database migrations</li> <li>Set up required tables</li> </ul>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":"<p>Now that you have Web App CAA running:</p> <ol> <li>Learn about Configuration - Customize your setup</li> <li>Explore the Architecture - Understand the system design</li> <li>Check the API Documentation - Integrate with other services</li> <li>Set up for Production - Deploy to a server</li> </ol>"},{"location":"getting-started/quick-start/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/quick-start/#common-issues","title":"Common Issues","text":"<p>Port Already in Use <pre><code># Change the port\nexport APP_PORT=8080\n./bin/web-app-caa\n</code></pre></p> <p>Database Permission Errors <pre><code># Ensure proper permissions\nmkdir -p data\nchmod 755 data\n</code></pre></p> <p>Go Build Errors <pre><code># Clean and rebuild\nmake clean\ngo clean -cache\nmake build\n</code></pre></p> <p>Need Help? </p> <ul> <li>Check the Installation Guide for detailed setup instructions</li> <li>View Configuration Options for environment variables</li> <li>Open an issue on GitHub if you encounter problems</li> </ul> <p>Next: Detailed Installation Guide \u2192</p>"}]}